; ********************************************************************************************************
; ********************************************************************************************************
;
;		Name : 		access.asm
;		Author : 	Paul Robson (paul@robsons.org.uk)
;		Purpose : 	Compile bytes and words, compile call (no use of paging)
;		Date : 		6th September 2018
;
; ********************************************************************************************************
; ********************************************************************************************************

; ********************************************************************************************************
;
;										Compile byte in A
;
; ********************************************************************************************************

CompileByte:
		push 	af
		push 	hl
		ld 		hl,(SVNextProgramFree)
		ld 		(hl),a
		inc 	hl
		ld 		(SVNextProgramFree),hl
		pop 	hl
		pop 	af
		ret

; ********************************************************************************************************
;
;										Compile word in HL
;
; ********************************************************************************************************

CompileWord:
		push 	af
		ld 		a,l
		call 	CompileByte
		ld 		a,h
		call 	CompileByte
		pop 	af
		ret

; ********************************************************************************************************
;
;										Compile call to AHL
;
; ********************************************************************************************************

CompileCall:
		push 	af
		ld 		a,$CD 
		call 	CompileByte
		call 	CompileWord
		pop 	af
		ret

; ********************************************************************************************************
;
;										Execute word at HLA
;
; ********************************************************************************************************

ExecuteHLAWord:
		push 	hl 									; address in IX
		pop 	ix
		ld 		hl,(AWork) 							; load in registers
		ld 		de,(BWork)
		ld 		bc,(CWork)
		call 	__XHLAWord 							; do it
		ld 		(CWork),bc 							; write out registers
		ld 		(BWork),de
		ld 		(AWork),hl
		ret 										; and return

__XHLAWord:
		jp 		(ix)
		
AWork:												; values of ABC
	dw 		0
BWork:
	dw 		0
CWork:
	dw 		0
