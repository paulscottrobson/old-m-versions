// ***********************************************************************************************
// ***********************************************************************************************
//
//		Name : 		level1.m
//		Purpose : 	Synthesise Level 1 Words
//		Author :	Paul Robson (paul@robsons.org.uk)
//		Created : 	29th September 2018
//
// ***********************************************************************************************
// ***********************************************************************************************

// ***********************************************************************************************
//									short increments
// ***********************************************************************************************

: 1+ 	b>r 1 		+ r>b ;
: 2+ 	b>r 2 		+ r>b ;
: 1- 	b>r $FFFF 	+ r>b ;
: 2-	b>r $FFFE 	+ r>b ;

// ***********************************************************************************************
//									 Logical Not (1's complement)
// ***********************************************************************************************

: not 	b>r a>b nand r>b ;

// ***********************************************************************************************
//										Negate (2's complement)
// ***********************************************************************************************

: 0- 	b>r a>b nand 1 + r>b ;

// ***********************************************************************************************
//											Absolute value
// ***********************************************************************************************

: abs 	-if 0- then ;

// ***********************************************************************************************
//										Subtract A from B into A
// ***********************************************************************************************

: - 	b>r c>r 0- + r>c r>b ;

// ***********************************************************************************************
//										Binary Logical Operations
// ***********************************************************************************************

: and nand not ;
: or  not swap not nand ;
: xor b>r c>r ab>r and a>c r>ab or not c>b or not r>c r>b ;

