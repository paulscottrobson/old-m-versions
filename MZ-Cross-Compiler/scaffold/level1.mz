// ***********************************************************************************************
// ***********************************************************************************************
//
//		Name : 		level1.mz
//		Purpose : 	Synthesise Level 1 Words
//		Author :	Paul Robson (paul@robsons.org.uk)
//		Created : 	7th October 2018
//
// ***********************************************************************************************
// ***********************************************************************************************

// ***********************************************************************************************
//									short increments
// ***********************************************************************************************

:: 1+ 	b>r 1 		+ r>b ;
:: 2+ 	b>r 2 		+ r>b ;
:: 1- 	b>r $FFFF 	+ r>b ;
:: 2-	b>r $FFFE 	+ r>b ;

// ***********************************************************************************************
//									 Logical Not (1's complement)
// ***********************************************************************************************

:: not 	b>r a>b nand r>b ;

// ***********************************************************************************************
//										Negate (2's complement)
// ***********************************************************************************************

:: 0- 	b>r a>b nand 1 + r>b ;

// ***********************************************************************************************
//											Absolute value
// ***********************************************************************************************

:: abs 	-if 0- then ;

// ***********************************************************************************************
//										Subtract A from B into A
// ***********************************************************************************************

:: - 	b>r 0- + r>b ;

// ***********************************************************************************************
//										Binary Logical Operations
// ***********************************************************************************************

:: xor.temp variable

:: and nand not ;
:: or  b>r not swap not nand r>b ;
:: xor b>r ab>r not and xor.temp !! r>ab swap not and xor.temp @@ or r>b ;

