(* ************************************************************************************************************
(* ************************************************************************************************************
(*
(*		Name :		console.m6
(*		Purpose :	Console I/O Functions
(*		Date :		22nd August 2018
(*		Author :	Paul Robson (paul@robsons.org.uk)
(*
(* ************************************************************************************************************
(* ************************************************************************************************************

: con.colour 	variable 
: con.cursorPos variable
: con.base      variable

(* ************************************************************************************************************
(*					Get the height of the writable console area (below is the edit area)
(* ************************************************************************************************************

: con.getConsoleHeight
	20
;

(*
(*						Set the cursor position, both in variable and on display
(*
: con.setCursorPosition private
	push.ab
		cursor!
		con.cursorPos!
	pop.ab
;

(* ************************************************************************************************************
(*											Put cursor at top left
(* ************************************************************************************************************

: con.home 
	push.ab
		0 con.setCursorPosition
	pop.ab
;

(* ************************************************************************************************************
(*											Clear Screen, Home Cursor
(* ************************************************************************************************************

: con.clear
	clrscreen con.home
;

(* ************************************************************************************************************
(*										Print character to console 2+6 format
(* ************************************************************************************************************

: con.emitRaw
	push.ab
		con.cursorPos@
		screen!
		1+ con.setCursorPosition
		con.getConsoleHeight 2* 2* 2* 2* 2*
		= if con.clear then
	pop.ab
;

(* ************************************************************************************************************
(*												Carriage Return
(* ************************************************************************************************************

: con.cr
	push.ab
		begin
			32 con.emitRaw
			con.cursorPos@ $1F and 0=
		until
	pop.ab
;

(* ************************************************************************************************************
(*										Print ASCII character, supports CR
(* ************************************************************************************************************

: con.emit 
	push.ab
		32 >= if swap 63 and con.colour@ + con.emitRaw pop.ab ; then
		swap 13 = if con.cr then
	pop.ab
;

(* ************************************************************************************************************
(*												  Print a space
(* ************************************************************************************************************

: con.space
	push.ab
		32 con.emit
	pop.ab
;

(* ************************************************************************************************************
(*												  Print A spaces
(* ************************************************************************************************************

: con.spaces
	push.ab
		for con.space next
	pop.ab
;

(* ************************************************************************************************************
(*											 Set the printing colour
(* ************************************************************************************************************

: con.setColour 
	push.ab 
		3 and 2* 2* 2* 2* 2* 2* con.colour! 
	pop.ab
;

(* ************************************************************************************************************
(*										Print string on the screen
(* ************************************************************************************************************

: con.print.string 
	push.ab 
	a>b c@ 
	if 
		for
			swap 1+ a>b c@ con.emit
		next	
	then
	pop.ab
;

(*
(*										Print number in A in given base.
(*
: con.print.number private
	push.ab
	con.base@ / if con.print.number then

	pop.ab
	con.base@ mod 
	-10 +
	-if -7 + then 
	65 + con.emit
;

(* ************************************************************************************************************
(*											Print A in Hexadecimal
(* ************************************************************************************************************

: con.print.hex 
	push.ab 
	con.space 16 con.base! swap con.print.number
	pop.ab
;

(* ************************************************************************************************************
(*											 Print A in Decimal
(* ************************************************************************************************************

: con.print.dec
	push.ab 
	con.space 10 con.base! swap con.print.number
	pop.ab
;

(* ************************************************************************************************************
(*											Set colours direct
(* ************************************************************************************************************

: con.red push.ab 0 con.setColour pop.ab ;
: con.white push.ab 1 con.setColour pop.ab ;
: con.green push.ab 2 con.setColour pop.ab ;
: con.yellow push.ab 3 con.setColour pop.ab ;

(* ************************************************************************************************************
(*											 Read a keystroke
(* ************************************************************************************************************

: con.get
	push.ab
		begin inkey 0= until
		begin inkey until
	pop.bb
;

