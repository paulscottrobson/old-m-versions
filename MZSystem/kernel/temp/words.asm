; ***********************************************************************************************
; ***********************************************************************************************
;
;		Name : 		core.asm
;		Purpose : 	Core words
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Created : 	30th September 2018
;
; ***********************************************************************************************
; ***********************************************************************************************

; ***********************************************************************************************
;								, 	Compile a Word
; ***********************************************************************************************

; @@word 		,
mz_define_2c_5f_77_6f_72_64:
		jp 		MEMCompileWord

; ***********************************************************************************************
;								c, 	Compile a Byte
; ***********************************************************************************************

; @@word		c,
mz_define_63_2c_5f_77_6f_72_64:
		ld 		a,l
		jp 		MEMCompileByte

; ***********************************************************************************************
;								i, 	Compile an instruction
; ***********************************************************************************************

; @@word		i,
mz_define_69_2c_5f_77_6f_72_64:
		jp 		MEMCompileInstruction

; ***********************************************************************************************
;								crunch Remove Private Words
; ***********************************************************************************************

; @@word 		crunch
mz_define_63_72_75_6e_63_68_5f_77_6f_72_64:
		jp 		DICTCrunchDictionary

; ***********************************************************************************************
;								; 	Return from subroutine
; ***********************************************************************************************

; @@macro.nx	;
mz_define_3b_5f_6d_61_63_72_6f_2e_6e_78:
		ld 		a,$C9
		jp 		MEMCompileByte

; ***********************************************************************************************
;								.h  Print A
; ***********************************************************************************************

; @@word 		.h
mz_define_2e_68_5f_77_6f_72_64:
		ld 		a,' '
		call 	IOPrintCharacter
		jp 		IOPrintHexWord

; ***********************************************************************************************
;									Stop the CPU
; ***********************************************************************************************

; @@word 		halt
mz_define_68_61_6c_74_5f_77_6f_72_64:
HaltSystem:
		di
		halt
		jr 		HaltSystem

; ***********************************************************************************************
;						  Display debug information on bottom line
; ***********************************************************************************************

; @@word 		x.debug
mz_define_78_2e_64_65_62_75_67_5f_77_6f_72_64:
		ld 		hl,(COM_ARegister)
		ld 		de,(COM_BRegister)
; @@word 		debug
mz_define_64_65_62_75_67_5f_77_6f_72_64:
		jp 		DebugCode

; ***********************************************************************************************
;								Make the last definition a macro
; ***********************************************************************************************

; @@macro 		macro
mz_define_6d_61_63_72_6f_5f_6d_61_63_72_6f:
		ld 		a,2
		jp	 	DICTOrInformationByte

; ***********************************************************************************************
;							Make the last definition compile.only
; ***********************************************************************************************

; @@macro 		compile.only
mz_define_63_6f_6d_70_69_6c_65_2e_6f_6e_6c_79_5f_6d_61_63_72_6f:
		ld 		a,$40
		jp	 	DICTOrInformationByte

; ***********************************************************************************************
;									Or the type ID with A
; ***********************************************************************************************

; @@word 		or.type.id
mz_define_6f_72_2e_74_79_70_65_2e_69_64_5f_77_6f_72_64:
		ld 		a,l
		jp	 	DICTOrInformationByte

; *** IMPORTANT *** This is not a macro, it is designed to be used in words that manipulate
; the last definition.

; ***********************************************************************************************
;							   Set cursor position to A
; ***********************************************************************************************

; @@word 		cursor!
mz_define_63_75_72_73_6f_72_21_5f_77_6f_72_64:
		jp 		IOSetCursor

; ***********************************************************************************************
;							  Write B to screen position A
; ***********************************************************************************************

; @@word 		screen!
mz_define_73_63_72_65_65_6e_21_5f_77_6f_72_64:
		ld 		a,e
		jp 		IOWriteCharacter

; ***********************************************************************************************
;							   Clear screen / home cursor
; ***********************************************************************************************

; @@word 		clr.screen
mz_define_63_6c_72_2e_73_63_72_65_65_6e_5f_77_6f_72_64:
		jp	 	IOClearScreen

; ***********************************************************************************************
;								 Scan the keyboard into A
; ***********************************************************************************************

; @@word 		key@
mz_define_6b_65_79_40_5f_77_6f_72_64:
		call 	IOScanKeyboard
		ld 		l,a
		ld 		h,0
		ret

; ***********************************************************************************************
;										Put B*A in A
; ***********************************************************************************************

; @@word 		*
mz_define_2a_5f_77_6f_72_64:
		jp 		MULTMultiply16

; ***********************************************************************************************
;										Put B/A in A
; ***********************************************************************************************

; @@word 		/
mz_define_2f_5f_77_6f_72_64:
		push 	de
		call	DIVDivideMod16
		ex 		de,hl
		pop 	de
		ret

; ***********************************************************************************************
;									Put Modulus of B/A in A
; ***********************************************************************************************

; @@word 		mod
mz_define_6d_6f_64_5f_77_6f_72_64:
		push 	de
		call	DIVDivideMod16
		pop 	de
		ret

DebugCode:
		push 	bc
		push 	de
		push 	hl

		push 	de

		ex 		de,hl
		ld 		b,'A'+$40
		ld 		c,$40
		ld 		hl,19+23*32
		call 	__DisplayHexInteger

		pop 	de
		ld 		b,'B'+$40
		ld 		c,$C0
		ld 		hl,26+23*32
		call 	__DisplayHexInteger

		pop 	hl
		pop 	de
		pop 	bc
		ret

__DisplayHexInteger:
		ld 		a,b
		call 	IOWriteCharacter
		inc 	hl
		ld 		a,':'+$80
		call 	IOWriteCharacter
		inc 	hl
		ld 		a,d
		call 	__DisplayHexByte
		ld 		a,e
__DisplayHexByte:
		push 	af
		rrca
		rrca
		rrca
		rrca
		call	__DisplayHexNibble
		pop 	af
__DisplayHexNibble:
		and 	$0F
		cp 		10
		jr 		c,__DisplayIntCh
		sub 	57
__DisplayIntCh:
		add 	a,48
		or 		c
		call	IOWriteCharacter
		inc 	hl
		ret

; ********************************************************************************************************
; ********************************************************************************************************
;
;		Name : 		datatransfer.asm
;		Author : 	Paul Robson (paul@robsons.org.uk)
;		Purpose : 	Copy and Fill routines
;		Date : 		3rd October 2018
;
; ********************************************************************************************************
; ********************************************************************************************************

; ========================================================================================================
;								Set the count value for data transfer
; ========================================================================================================

; @@word 		count!
mz_define_63_6f_75_6e_74_21_5f_77_6f_72_64:
		ld 		(DataTransferCount),hl
		ret

; ========================================================================================================
;								Fill [Count] bytes with A starting at B
; ========================================================================================================

; @@word 		fill
mz_define_66_69_6c_6c_5f_77_6f_72_64:

		ld 		bc,(DataTransferCount)
		ld 		a,b
		or 		c
		ret 	z

		push 	bc
		push 	hl

__fill1:ld 		(hl),e

		inc 	hl
		dec 	bc
		ld 		a,b
		or 		c
		jr 		nz,__fill1

		pop 	hl
		pop 	bc
		ret

; ========================================================================================================
;											Copy [Count] bytes from B to A
; ========================================================================================================

; @@word 		copy
mz_define_63_6f_70_79_5f_77_6f_72_64:

		push 	bc
		push 	de
		push 	hl

		ld 		bc,(DataTransferCount)
		ld 		a,b 								; exit now if count zero.
		or 		c
		jr 		z,__copyExit

		xor 	a 									; find direction.
		sbc 	hl,de
		ld 		a,h
		add 	hl,de
		bit 	7,a 								; if +ve use LDDR
		jr 		z,__copy2

		ex 		de,hl 								; LDIR etc do (DE) <- (HL)
		ldir
__copyExit:
		pop 	hl
		pop 	de
		pop 	bc
		ret

__copy2:
;		db 		$DD,$01
		add 	hl,bc 								; add length to HL,DE, swap as LDDR does (DE) <- (HL)
		ex 		de,hl
		add 	hl,bc
		dec 	de 									; -1 to point to last byte
		dec 	hl
		lddr
		jr 		__copyExit
; ***********************************************************************************************
; ***********************************************************************************************
;
;		Name : 		system.asm
;		Purpose : 	System words
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Created : 	5th October 2018
;
; ***********************************************************************************************
; ***********************************************************************************************

; ***********************************************************************************************
;						sys.info 	Get System Information address
; ***********************************************************************************************

; @@word 		sys.info
mz_define_73_79_73_2e_69_6e_66_6f_5f_77_6f_72_64:
		ex 		de,hl
		ld 		hl,SystemInformation
		ret

; ***********************************************************************************************
;				switch and stack new page (can only be used from $8000-$BFFF)
; ***********************************************************************************************

; @@word 		page.switch
mz_define_70_61_67_65_2e_73_77_69_74_63_68_5f_77_6f_72_64:
		ld 		a,l
		jp 		PAGESwitch

; @@word 		page.restore
mz_define_70_61_67_65_2e_72_65_73_74_6f_72_65_5f_77_6f_72_64:
		jp 		PAGERestore

; ***********************************************************************************************
;							  large edit buffer information
; ***********************************************************************************************

; @@word 		edit.buffer
mz_define_65_64_69_74_2e_62_75_66_66_65_72_5f_77_6f_72_64:
		ex 		de,hl
		ld 		hl,EditBuffer
		ret

; @@word 		edit.buffer.size
mz_define_65_64_69_74_2e_62_75_66_66_65_72_2e_73_69_7a_65_5f_77_6f_72_64:
		ex 		de,hl
		ld 		hl,1024
		ret

; ***********************************************************************************************
;					do.text Do Test from DE->HL return error message or 0
; ***********************************************************************************************

; @@word 		do.text
mz_define_64_6f_2e_74_65_78_74_5f_77_6f_72_64:
		call 	PARSESetBuffer
__doTextLoop:
		call 	PARSENextWord
		jr 		c,__doTextComplete
		call 	PROCProcessWord
		jr 		nc,__doTextLoop
		ld 		hl,ParseBuffer
		push 	hl
__dbAppend:
		inc 	hl
		ld 		a,(hl)
		or 		a
		jr 		nz,__dbAppend
		ld 		(hl),' '
		inc 	hl
		ld 		(hl),'?'
		inc 	hl
		ld 		(hl),'?'
		inc 	hl
		ld 		(hl),0
		pop 	hl
		ret

__doTextComplete:
		ld 		hl,$0000
		ret

; ***********************************************************************************************
;						save.image  Write image to boot_save.img
; ***********************************************************************************************

; @@word 		save.image.save
mz_define_73_61_76_65_2e_69_6d_61_67_65_2e_73_61_76_65_5f_77_6f_72_64:
		jp 		$7FF9 								; relies on the bootstrap code (!)

