// ****************************************************************************************************
// ****************************************************************************************************
//
//		Name:		console.m7
//		Purpose:	Basic I/O console
//		Author: 	paul@robsons.org.uk
//		Date: 		29th August 2018
//
// ****************************************************************************************************
// ****************************************************************************************************


variable con.cursor 									// Cursor position.
variable con.colourBit 									// Upper 2 bits of colour.
variable con.base 										// Base for number print 

// ****************************************************************************************************
//									Clear Screen Home Cursor
// ****************************************************************************************************

: con.clear
	push.ab
		clrscreen 0 con.cursor! cursor!
	pop.ab
;

// ****************************************************************************************************
//									Raw Character Print (2+6 format)
// ****************************************************************************************************

: con.rawEmit private
	con.cursor@ screen!	
	1 con.cursor& +! con.cursor@ cursor!
	sysinfo 14 + @ a>r sysinfo 16 + @ swap r>a *
	con.cursor@ = if con.clear then
;

// ****************************************************************************************************
//											Carriage Return
// ****************************************************************************************************

: con.cr 
	push.ab
	begin
		$20 con.rawEmit 
		sysinfo 14 + @ con.cursor@ swap mod 0=
	until
	pop.ab
;

// ****************************************************************************************************
//										  Print ASCII Character
// ****************************************************************************************************

: con.emit
	push.ab
		13 = if con.cr pop.ab ; then
		swap $7F and 96 > if swap 32 - swap then swap
		$3F and con.colourBit@ + con.rawEmit
	pop.ab
;

// ****************************************************************************************************
//										  Colours
// ****************************************************************************************************

: con.colour 
	push.ab
		3 and 2* 2* 2* 2* 2* 2* con.colourBit!
	pop.ab
;
: con.red    push.ab 0 con.colour pop.ab ;
: con.white  push.ab 1 con.colour pop.ab ;
: con.green  push.ab 2 con.colour pop.ab ;
: con.yellow push.ab 3 con.colour pop.ab ;

// ****************************************************************************************************
//											Print String
// ****************************************************************************************************

: con.print.string
	push.ab
	a>b c@
	if
		for
			swap 1+ a>b c@ con.emit
		next
	then 
	pop.ab
;

// ****************************************************************************************************
//											Print Constant
// ****************************************************************************************************

: con.print.const private
	a>r con.base@ / if con.print.const then
	r>a con.base@ mod 
	10 >= if swap -57 + swap then
	swap 48 + con.emit
;

: con.print.dec
	push.ab
		10 con.base! swap con.print.const
	pop.ab
;

: con.print.hex
	push.ab
		16 con.base! swap con.print.const
	pop.ab
;

// ****************************************************************************************************
//											Scan keyboard
// ****************************************************************************************************

: con.get
	push.ab
		begin inkey 0= until
		begin inkey until
	pop.bb
;
