// ************************************************************************************************************
// ************************************************************************************************************
//
//		Name :		editor.m6
//		Purpose :	Text Editor
//		Date :		23rd August 2018
//		Author :	Paul Robson (paul@robsons.org.uk)
//
// ************************************************************************************************************
// ************************************************************************************************************

import ..\library\console.m7

variable  editor.position 						// Position of start of edit 
variable  editor.size  							// Size of edit area 
variable  editor.cursor  						// Cursor position 

// ************************************************************************************************************
//								Clear the editor buffer
// ************************************************************************************************************

: editor.clear 
	push.ab
	buffer swap 								// Length in A address in B 
	for
		i c@ swap c! 1+ swap 	// replace I c@ with swap $20 
	next
	pop.ab
;

// ************************************************************************************************************
// 					Set up as <size in lines> <start in lines> editor.setup
// ************************************************************************************************************

: editor.setup
	push.ab
		2* 2* 2* 2* 2* editor.position!
		swap 2* 2* 2* 2* 2* editor.size!
	pop.ab
;

// 	
// 								Refresh editor display & position cursor
// 

: editor.refresh private
	editor.size@ 											// Copy editor.size chars 
	for
		buffer swap i swap + c@ a>r 						// Put target address on stack, index in B
		swap editor.position@ + swap r>a swap 				// Add position on screen and set up for 
		screen! 											// Write to screen 
	next 	
	editor.size@ 1- editor.cursor@ min 0 max editor.cursor!	// Force cursor into range 
	editor.position@ editor.cursor@ + cursor!				// Position cursor 
;

variable editor.key 										// Key pressed 

: editor.moveCheck private									// If B is key pressed, move by A 
	a>r swap editor.key@ = 
	if r>a a>r editor.cursor& +!  then
	r>a ;

: editor.surroundSpace 										// Spaces before and after the buffer
	buffer $20 swap 1- c! buffer + $20 swap c!
;

variable editor.source										// copying block.
variable editor.target
variable editor.count

: editor.backspace private 									// backspace
	editor.cursor@ if 										// if not at 0
		1- editor.cursor!									// back one
		editor.surroundSpace								// surround with spaces
		buffer editor.cursor@ + editor.target! 1+ editor.source! // set up source and target
		buffer swap editor.cursor@ - editor.count!			// set up count
		editor.source& copy 								// and copy
	then 
;

: editor.character private									// insert a character
	buffer swap editor.cursor@ - a>r 						// count to copy to stack
	buffer + swap r>a 										// point to end addr in B, get count in A
	for
		b>a 1- c@ swap c! 1- swap 							// copy prev to current
	next
	buffer editor.cursor@ + c@ $C0 and a>r 					// get colour at current
	editor.key@ $3F and a>b r>a + a>r 						// apply colour to character pressed.
	buffer editor.cursor@ + swap r>a swap c! 				// write in current cell.
	1 editor.cursor& +! 									// move forward one.
; 			

: editor.scanner private
	editor.target! 											// save direction in editor.target.
	editor.key@ 3 and 2* 2* 2* 2* 2* 2* editor.source! 		// save colour to change in editor.source
	buffer editor.cursor@ + 								// current position
	begin


	0 until
;

: editor.check.move private
	20 -1 editor.moveCheck								
	21 32 editor.moveCheck
	22 -32 editor.moveCheck
	23 1 editor.moveCheck
;

: editor.edit
	begin
		editor.refresh 										// Refresh 
		con.get editor.key! 								// Get and save 
		editor.check.move
		editor.key@ 2/ 2/ 4 = 								// colour word
		if -1 editor.scanner 1 editor.scanner then 		
		8 editor.key@ = if editor.backspace then			// backspace
		editor.key@ 32 >= if editor.character then 			// all other characters
		editor.key@ 13 =									// Keep going till CR 
	until
;

