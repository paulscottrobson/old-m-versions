              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-10-29 21:33:32
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		21st October 2018
              	;		Purpose :	ZForth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
8000:         				org 	$8000
8000: 1804    				jr 		Boot
8002: FFFF    				org 	$8004
8004: E788    				dw 		SystemInformation
              	
8006:         	Boot:		
8006: ED7B0389				ld 		sp,(SIStack)					; reset Z80 Stack
800A: ED910702				db 		$ED,$91,7,2						; set turbo port (7) to 2 (14Mhz)
800E: CD1F84  				call	IOClearScreen					; clear screen and home cursor.
8011: CD7186  				call 	PAGEReset 						; switch to boot page.
8014: 2AEF88  				ld 		hl,(SIBootAddress)				; jump to boot address
8017: E9      				jp 		(hl)
              	
8018: F3      	HaltZ80:	di 										; stop the Z80 running.
8019: 76      				halt
801A: 18FC    				jr 		HaltZ80
              	
801C:         	ErrorHandlerHL:
801C: 0603    				ld 		b,3
801E: CD6484  				call 	IOPrintString
8021: 18FE    	EHHalt:		jr 		EHHalt	
              	
              				include "temp/include.asm"				; file built from kernel components
              		include "compare.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		compare.asm
              	;		Purpose:	Comparison routines.
              	;		Created : 	29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									= Test
              	;
              	; *********************************************************************************
              	
8023:         	__zfdefine_3d:
              	; @word =
              	
8023: 7C      		ld 		a,h
8024: BA      		cp 		d
8025: 2008    		jr 		nz,__COMFalse
8027: 7D      		ld 		a,l
8028: BB      		cp 		e
8029: 2004    		jr 		nz,__COMFalse
802B:         	__COMTrue:
802B: 21FFFF  		ld 		hl,$FFFF
802E: C9      		ret
802F:         	__COMFalse:
802F: 210000  		ld 		hl,$0000
8032: C9      		ret
              	
              	; *********************************************************************************
              	;
              	;									<> Test
              	;
              	; *********************************************************************************
              	
8033:         	__zfdefine_3c_3e:
              	; @word <>
              	
8033: 7C      		ld 		a,h
8034: BA      		cp 		d
8035: 20F4    		jr 		nz,__COMTrue
8037: 7D      		ld 		a,l
8038: BB      		cp 		e
8039: 20F0    		jr 		nz,__COMTrue
803B: 18F2    		jr 		__COMFalse
              	
              	; *********************************************************************************
              	;
              	;									<= Test
              	;
              	; *********************************************************************************
              	
803D:         	__zfdefine_3c_3d:
              	; @word <=
              	
803D: 7C      		ld 		a,h
803E: AA      	    xor 	d
803F: FA4880  	    jp 		m,__LessEqual
8042: ED52    	    sbc 	hl,de
8044: 30E5    	    jr 		nc,__COMTrue
8046: 18E7    	    jr 		__COMFalse
8048:         	__LessEqual:
8048: CB7A    		bit 	7,d
804A: 28E3    	    jr 		z,__COMFalse
804C: 18DD    	    jr 		__COMTrue
              	
              	; *********************************************************************************
              	;
              	;
              	;
              	; *********************************************************************************
              	
804E:         	__zfdefine_3e:
              	; @word >
              	
804E: 7C      		ld 		a,h
804F: AA      	    xor 	d
8050: FA5980  	    jp 		m,__Greater
8053: ED52    	    sbc 	hl,de
8055: 38D4    	    jr 		c,__COMTrue
8057: 18D6    	    jr 		__COMFalse
8059:         	__Greater:
8059: CB7A    		bit 	7,d
805B: 20D2    	    jr 		nz,__COMFalse
805D: 18CC    	    jr 		__COMTrue
              	
              		include "compile.asm"
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	;
              	;		Name : 		compile.asm
              	;		Purpose : 	Compiler Code
              	;		Created : 	29th October 2018
              	;
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			In compile mode, switches back to execute. In execute mode, causes error.
              	;
              	; ***********************************************************************************************
              	
805F:         	__zfdefine_65_78_65_63_75_74_65_2f_6d_61_63_72_6f:
              	; @macro execute
805F:         	COMSetExecuteMode:
805F: AF      			xor		a
8060: 326E89  			ld 		(COMIsCompileMode),a
8063: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			In execute mode, switches to compile mode.
              	;
              	; ***********************************************************************************************
              	
8064:         	__zfdefine_63_6f_6d_70_69_6c_65_2f_6d_61_63_72_6f:
              	; @macro compile
8064: 3EFF    			ld 		a,$FF
8066: 326E89  			ld 		(COMIsCompileMode),a
8069: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Attempt to define,compile or execute word at HL according to mode set.
              	;			returns CC/HL=0 if okay, or CS/HL=word on error if cannot figure it out.
              	;
              	; ***********************************************************************************************
              	
806A:         	COMCompileExecute:
806A: C5      			push 	bc 									; save registers
806B: D5      			push 	de
806C: E5      			push 	hl
806D: 3A6E89  			ld 		a,(COMIsCompileMode)
8070: B7      			or 		a
8071: 2805    			jr 		z,__COMCDoExecute
              	
8073:         	__COMCDoCompile:
8073: CD8380  			call 	__COMCompiler
8076: 1803    			jr 		__COMCExit
8078:         	__COMCDoExecute:
8078: CDEC80  			call 	__COMExecutor						; else exceute it
807B:         	__COMCExit:
807B: E1      			pop 	hl 									; restore registers
807C: D1      			pop 	de
807D: C1      			pop 	bc
807E: D8      			ret 	c 									; if CS return with HL at original value
807F: 210000  			ld 		hl,$0000 							; otherwise return zero.
8082: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;							Attempt to compile word at HL.
              	;				returns CC if okay, or CS on error if cannot figure it out.
              	;
              	; ***********************************************************************************************
              	
8083:         	__COMCompiler:
8083: E5      			push 	hl 									; save word address
8084: AF      			xor 	a
8085: CD4182  			call 	DICTFind							; look up first word in the dictionary.
8088: 3820    			jr 		c,__COMCTryConstant
              	
808A: 7A      			ld 		a,d 								; look at type ID byte
808B: E607    			and 	7 									; and decide what to do.
808D: 280A    			jr 		z,__COMCWord
808F: FE01    			cp 		1
8091: 280C    			jr 		z,__COMCMacro
8093: FE02    			cp 		2
8095: 280E    			jr 		z,__COMCAddress
8097:         	__COMCFail1: 										; shouldn't get here.
8097: 18FE    			jr 		__COMCFail1
              	
8099:         	__COMCWord:
8099: CDC486  			call 	PAGECreateCodeCallEHL 				; compile the code for the word.
809C: E1      			pop 	hl 									; throw away word address
809D: AF      			xor 	a
809E: C9      			ret
              	
809F:         	__COMCMacro:
809F: CD2481  			call 	COMExecuteEHL 						; if there, just execute it.
80A2: E1      			pop 	hl 									; throw away word address
80A3: AF      			xor 	a
80A4: C9      			ret
              	
80A5:         	__COMCAddress:
80A5: CD1681  			call 	COMConstantCode 					; if an address, compile as a constant.
80A8: AF      			xor 	a
80A9: C9      			ret
              	;
              	;		If in neither try integer constant.
              	;
80AA:         	__COMCTryConstant:									; not in either dictionary.
80AA: E1      			pop 	hl 									; restore word address
80AB: 7E      			ld 		a,(hl)								; string constant ?
80AC: E63F    			and		$3F
80AE: FE22    			cp 		'"'
80B0: 2809    			jr 		z,__COMCStringConstant
80B2: CD4881  			call 	CONSTConvert 						; try as an integer constant
80B5: D8      			ret 	c 									; error, give up.
80B6: CD1681  			call 	COMConstantCode 					; compile that constant
80B9: AF      			xor 	a
80BA: C9      			ret
              	;
              	;		String Constant
              	;
80BB:         	__COMCStringConstant:
80BB: E5      			push 	hl
80BC: 0600    			ld 		b,0 								; calculate length
80BE:         	__COMCCalcLength:
80BE: 04      			inc 	b
80BF: 23      			inc 	hl
80C0: 7E      			ld 		a,(hl)
80C1: B7      			or 		a
80C2: 20FA    			jr 		nz,__COMCCalcLength
80C4: 3E18    			ld 		a,$18 								; compile JR
80C6: CD4483  			call 	FARCompileByte
80C9: 78      			ld 		a,b 								; length
80CA: CD4483  			call 	FARCompileByte
80CD: ED5BE788			ld 		de,(SICodeFree) 					; put address in DE
80D1: E1      			pop 	hl 									; now do the string
80D2:         	__COMCCopyString:
80D2: 23      			inc 	hl
80D3: 7E      			ld 		a,(hl)
80D4: B7      			or 		a
80D5: 280B    			jr 		z,__COMCStringDone
80D7: FE5F    			cp 		'_'
80D9: 2002    			jr 		nz,__COMCNotUnderscore
80DB: 3E20    			ld 		a,' '
80DD:         	__COMCNotUnderscore:
80DD: CD4483  			call 	FARCompileByte
80E0: 18F0    			jr 		__COMCCopyString
80E2:         	__COMCStringDone:
80E2: AF      			xor 	a 									; compile end of string
80E3: CD4483  			call 	FARCompileByte
80E6: EB      			ex 		de,hl
80E7: CD1681  			call 	COMConstantCode 					; load in as constant
80EA: AF      			xor 	a 									; return with CC
80EB: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;										Executor for word in HL
              	;
              	; ***********************************************************************************************
              	
80EC:         	__COMExecutor:
80EC: E5      			push 	hl 									; save word address
80ED: 3E40    			ld 		a,$40 								; find the word, must be executable
80EF: CD4182  			call 	DICTFind
80F2: 380A    			jr 		c,__COMExecNotDictionary 			; skip if not in dictionary.
              	
80F4: 7A      			ld 		a,d 								; check is it a variable
80F5: E607    			and 	7
80F7: FE02    			cp 		2 									; if so, behave like it's a number.
80F9: 2015    			jr 		nz,__COMExExecute
80FB: D1      			pop 	de 									; throw the value.
80FC: 1805    			jr 		__COMExHandleConstant
              	
80FE:         	__COMExecNotDictionary:
80FE: E1      			pop 	hl 									; restore the name
80FF: CD4881  			call 	CONSTConvert 						; try to make it a number
8102: D8      			ret 	c 									; exit if failed.
8103:         	__COMExHandleConstant:
8103: ED5B6F89			ld 		de,(COMARegister) 					; copy B to A
8107: ED537189			ld 		(COMBRegister),de
810B: 226F89  			ld 		(COMARegister),hl 					; copy new value to A
810E: AF      			xor 	a 									; ret with CC
810F: C9      			ret
              	
8110:         	__COMExExecute:
8110: CD2481  			call 	COMExecuteEHL 						; execute that word in context.
8113: E1      			pop 	hl 									; throw away word address
8114: AF      			xor 	a
8115: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;									Generate code for constant in HL
              	;
              	; ***********************************************************************************************
              	
8116:         	COMConstantCode:
8116: 3EEB    			ld 		a,$EB 								; ex de,hl
8118: CD4483  			call 	FARCompileByte
811B: 3E21    			ld 		a,$21 								; ld hl,const
811D: CD4483  			call 	FARCompileByte
8120: CD5C83  			call 	FARCompileWord 						; compile the constant
8123: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;							Execute code at EHL in Register Context
              	;
              	; ***********************************************************************************************
              	
8124:         	COMExecuteEHL:
8124: 7B      			ld 		a,e 								; switch to that page
8125: CD8886  			call 	PAGESwitch
8128: 013981  			ld  	bc,__COMExecuteExit   				; push continuation code on the stack
812B: C5      			push 	bc
812C: E5      			push 	hl 									; push call address on stack
812D: 2A6F89  			ld 		hl,(COMARegister)
8130: ED5B7189			ld 		de,(COMBRegister)
8134: ED4B7389			ld 		bc,(COMCRegister)
8138: C9      			ret 										; do call address
8139:         	__COMExecuteExit:
8139: 226F89  			ld 		(COMARegister),hl
813C: ED537189			ld 		(COMBRegister),de
8140: ED437389			ld 		(COMCRegister),bc
8144: CDAE86  			call 	PAGERestore 						; restore the page
8147: C9      			ret
              		include "constant.asm"
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Purpose : 	Constant conversion
              	;		Created : 	29th October 2018
              	;
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at HL to constant in HL. DE 0, Carry Clear if true
              	;
              	; ***********************************************************************************************
              	
8148:         	CONSTConvert:
8148: C5      		push 	bc
8149: EB      		ex 		de,hl 									; string pointer in DE
814A: 210000  		ld 		hl,$0000								; result in HL.
814D: 0600    		ld 		b,0
814F: 1A      		ld 		a,(de)									; check if -x
8150: E63F    		and 	$3F
8152: FE2D    		cp 		'-'
8154: 2002    		jr 		nz,__CONConvLoop
8156: 04      		inc 	b 										; B is sign flag
8157: 13      		inc 	de 										; skip over - sign.
8158:         	__CONConvLoop:
8158: 1A      		ld 		a,(de)									; get next
8159: 13      		inc 	de
815A: B7      		or 		a										; if end of string, completed.
815B: 2823    		jr 		z,__CONConComplete
815D: E63F    		and 	$3F
815F: FE30    		cp 		'0'										; must be 0-9 otherwise
8161: 3814    		jr 		c,__CONConFail
8163: FE3A    		cp 		'9'+1
8165: 3010    		jr 		nc,__CONConFail
              	
8167: C5      		push 	bc
8168: E5      		push 	hl 										; HL -> BC
8169: C1      		pop 	bc
816A: 29      		add 	hl,hl 									; HL := HL * 4 + BC
816B: 29      		add 	hl,hl
816C: 09      		add 	hl,bc
816D: 29      		add 	hl,hl 									; HL := HL * 10
816E: 0600    		ld 		b,0 									; add the digit into HL
8170: E60F    		and 	15
8172: 4F      		ld 		c,a
8173: 09      		add 	hl,bc
8174: C1      		pop 	bc
8175: 18E1    		jr 		__CONConvLoop 							; next character
              	
8177:         	__CONConFail: 										; didn't convert
8177: 21FFFF  		ld 		hl,$FFFF
817A: 11FFFF  		ld 		de,$FFFF
817D: 37      		scf
817E: C1      		pop 	bc
817F: C9      		ret
              	
8180:         	__CONConComplete:									; did convert
8180: 78      		ld 		a,b
8181: B7      		or 		a
8182: 2807    		jr 		z,__CONConNotNegative
              	
8184: 7C      		ld 		a,h 									; negate HL
8185: 2F      		cpl
8186: 67      		ld 		h,a
8187: 7D      		ld 		a,l
8188: 2F      		cpl
8189: 6F      		ld 		l,a
818A: 23      		inc 	hl
              	
818B:         	__CONConNotNegative:
818B: 110000  		ld 		de,$0000
818E: AF      		xor 	a 										; clear carry
818F: C1      		pop 	bc
8190: C9      		ret
              		include "debug.asm"
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		debug.asm
              	;		Purpose : 	Debug routine (shows A B on bottom line)
              	;		Created : 	29th October 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
8191:         	__zfdefine_64_65_62_75_67:
              	; @word debug
              	
8191:         	DebugCode:
8191: C5      			push 	bc
8192: D5      			push 	de
8193: E5      			push 	hl
              	
8194: C5      			push 	bc
8195: D5      			push 	de
8196: E5      			push 	hl
              	
8197: 3A0B89  			ld 		a,(SIScreenWidth)					; move 13 in from left
819A: D614    			sub 	20
819C: 6F      			ld 		l,a
819D: 3A0F89  			ld 		a,(SIScreenHeight)					; on the bottom line
81A0: 3D      			dec 	a
81A1: 67      			ld 		h,a
81A2: CD1B84  			call 	IOSetCursor
              	
81A5: D1      			pop 	de 									; display A
81A6: 0E41    			ld 		c,'A'
81A8: CDC581  			call 	__DisplayHexInteger
              	
81AB: 3E20    			ld 		a,' '
81AD: CDDF83  			call 	IOPrintChar
              	
81B0: D1      			pop 	de 									; display B
81B1: 0E42    			ld 		c,'B'
81B3: CDC581  			call 	__DisplayHexInteger
              	
81B6: 3E20    			ld 		a,' '
81B8: CDDF83  			call 	IOPrintChar
              	
81BB: D1      			pop 	de 									; display C
81BC: 0E43    			ld 		c,'C'
81BE: CDC581  			call 	__DisplayHexInteger
              	
81C1: E1      			pop 	hl
81C2: D1      			pop 	de
81C3: C1      			pop 	bc
81C4: C9      			ret
              	
81C5:         	__DisplayHexInteger:
81C5: 3E05    			ld 		a,5
81C7: CD1384  			call 	IOSetColour
81CA: 79      			ld 		a,c
81CB: CDDF83  			call 	IOPrintChar
81CE: 23      			inc 	hl
81CF: 3E07    			ld 		a,7
81D1: CD1384  			call 	IOSetColour
81D4: 3E3A    			ld 		a,':'
81D6: CDDF83  			call 	IOPrintChar
81D9: 23      			inc 	hl
81DA: EB      			ex 		de,hl
81DB: 3E04    			ld 		a,4
81DD: CD1384  			call 	IOSetColour
81E0: CD3F84  			call 	IOPrintHexWord
81E3: EB      			ex 		de,hl
81E4: C9      			ret
              		include "dictionary.asm"
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Purpose : 	Dictionary code.
              	;		Created : 	22nd October 2018
              	;
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;							Set Forth/Macro target dictionaries
              	;
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Add Dictionary Word. Name is ASCIIZ string at HL, uses the current page/pointer
              	;			values.
              	;
              	; ***********************************************************************************************
              	
81E5:         	__zfdefine_64_69_63_74_2e_61_64_64:
              	; @word dict.add
              	
81E5:         	DICTAdd:
81E5: F5      			push 	af 									; registers to stack.
81E6: C5      			push 	bc
81E7: D5      			push 	de
81E8: E5      			push	hl
81E9: DDE5    			push 	ix
81EB: 3AF388  			ld 		a,(SIDictionaryPage)				; switch to dictionary page
81EE: CD8886  			call 	PAGESwitch
81F1: DD2AEB88			ld 		ix,(SIDictionaryFree)				; IX = Free Dictionary Pointer
              	
81F5: DD360006			ld 		(ix+0),6 							; offset, update when copying name
81F9: CDA282  			call 	DICTCalculateHash  					; calculate and store hash.
81FC: DD7701  			ld 		(ix+1),a
81FF: 3AFB88  			ld 		a,(SICodeFreePage)					; code page
8202: DD7702  			ld 		(ix+2),a
8205: ED5BE788			ld 		de,(SICodeFree)						; code address
8209: DD7303  			ld 		(ix+3),e
820C: DD7204  			ld 		(ix+4),d
820F: DD360500			ld 		(ix+5),0 							; initial type ID = 0
8213: 110500  			ld 		de,5 								; advance so IX points to the type ID.
8216: DD19    			add 	ix,de
8218: DD227589			ld 		(DICTLastTypeByte),ix 				; save that address as last set type byte.
821C: EB      			ex 		de,hl 								; put name in DE
821D: 2AEB88  			ld 		hl,(SIDictionaryFree) 				; point HL to the offset
8220: DD23    			inc 	ix 									; ix = first character (+6)
8222:         	__DICTAddCopy:
8222: 1A      			ld 		a,(de) 								; copy byte over as 6 bit ASCII.
8223: DD7700  			ld 		(ix+0),a
8226: 1A      			ld 		a,(de) 								; reget to test for
8227: 13      			inc 	de
8228: DD23    			inc 	ix
822A: 34      			inc 	(hl) 								; increment the offset byte.
822B: B7      			or 		a
822C: 20F4    			jr 		nz,__DICTAddCopy 					; until string is copied over.
              	
822E: DD360000			ld 		(ix+0),0 							; write end of dictionary zero.
8232: DD22EB88			ld 		(SIDictionaryFree),ix 				; update next free pointer.
8236: CDAE86  			call 	PAGERestore
8239: DDE1    			pop 	ix 									; restore and exit
823B: E1      			pop 	hl
823C: D1      			pop 	de
823D: C1      			pop 	bc
823E: F1      			pop 	af
823F: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. HL points to name, A & typeID must be zero.
              	; 			On exit, HL is the address, D the type ID and E the page number with CC
              	;			if found, CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
8240:         	__zfdefine_64_69_63_74_2e_66_69_6e_64:
              	; @word dict.find
8240: AF      			xor 	a
              	
8241:         	DICTFind:
8241: C5      			push 	bc 								; save registers - return in DEHL Carry
8242: DDE5    			push 	ix
8244: 47      			ld 		b,a 							; put bit check in A
8245: CDA282  			call 	DICTCalculateHash 				; calculate the hash, put in C
8248: 4F      			ld 		c,a
8249: 3AF388  			ld 		a,(SIDictionaryPage) 			; switch to dictionary page.
824C: CD8886  			call 	PAGESwitch
824F: DD2100C0			ld 		ix,$C000 						; dictionary start
8253:         	__DICTFindMainLoop:
8253: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
8256: B7      			or 		a
8257: 2839    			jr 		z,__DICTFindFail
              	
8259: DD7E01  			ld 		a,(ix+1) 						; hashes match ?
825C: B9      			cp 		c
825D: 202A    			jr 		nz,__DICTFindNext
              	
825F: DD7E05  			ld 		a,(ix+5) 						; mask anything with type ID
8262: A0      			and 	b
8263: 2024    			jr 		nz,__DICTFindNext				; if non-zero then not this one.
              	
8265: DDE5    			push 	ix 								; save pointers on stack.
8267: E5      			push 	hl
              	
8268:         	__DICTFindCheckMatch:
8268: DD7E06  			ld 		a,(ix+6) 						; get character
826B: BE      			cp 		(hl) 							; do they match
826C: 2018    			jr 		nz,__DICTFindNoMatch 			; if no, try the next one
826E: DD23    			inc 	ix 								; next character
8270: 23      			inc 	hl
8271: B7      			or 		a
8272: 20F4    			jr 		nz,__DICTFindCheckMatch 		; no keep going
              	
8274: E1      			pop 	hl 								; restore HL and IX
8275: DDE1    			pop 	ix
8277: DD5605  			ld 		d,(ix+5) 						; D = type
827A: DD5E02  			ld 		e,(ix+2)						; E = page
827D: DD6E03  			ld 		l,(ix+3)						; HL = address
8280: DD6604  			ld 		h,(ix+4)
8283: AF      			xor 	a 								; clear the carry flag.
8284: 1813    			jr 		__DICTFindExit
              	
8286:         	__DICTFindNoMatch:								; this one doesn't match.
8286: E1      			pop 	hl 								; restore HL and IX
8287: DDE1    			pop 	ix
8289:         	__DICTFindNext:
8289: DD5E00  			ld 		e,(ix+0)						; DE = offset
828C: 1600    			ld 		d,$00
828E: DD19    			add 	ix,de 							; next word.
8290: 18C1    			jr 		__DICTFindMainLoop				; and try the next one.
              	
8292:         	__DICTFindFail:
8292: 110000  			ld 		de,$0000 						; return all zeros.
8295: 210000  			ld 		hl,$0000
8298: 37      			scf 									; set carry flag
8299:         	__DICTFindExit:
8299: F5      			push 	af								; restore old page.
829A: CDAE86  			call 	PAGERestore
829D: F1      			pop 	af
829E: DDE1    			pop 	ix 								; pop registers and return.
82A0: C1      			pop 	bc
82A1: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;							Calculate word has for ASCIIZ value at HL
              	;
              	; ***********************************************************************************************
              	
82A2:         	DICTCalculateHash:
82A2: C5      			push 	bc
82A3: E5      			push 	hl
82A4: AF      			xor 	a
82A5: E1      			pop 	hl
82A6: C1      			pop 	bc
82A7: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;					Exclusive or A with the type ID of the last entered value
              	;
              	; ***********************************************************************************************
              	
82A8:         	__zfdefine_64_69_63_74_2e_78_6f_72_2e_74_79_70_65:
              	; @word dict.xor.type
              	
82A8: 7D      			ld 		a,l
              	
82A9:         	DICTXorType:
82A9: F5      			push 	af 									; save registers
82AA: E5      			push 	hl
82AB: F5      			push 	af 									; switch to dictionary preserving A
82AC: 3AF388  			ld 		a,(SIDictionaryPage)
82AF: CD8886  			call 	PAGESwitch
82B2: F1      			pop 	af
82B3: 2A7589  			ld 		hl,(DICTLastTypeByte) 				; XOR with last type byte
82B6: AE      			xor 	(hl)
82B7: 77      			ld 		(hl),a
82B8: CDAE86  			call 	PAGERestore 						; and return to original page
82BB: E1      			pop 	hl
82BC: F1      			pop 	af
82BD: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;										Crunch the dictionary
              	;
              	; ***********************************************************************************************
              	
82BE:         	__zfdefine_64_69_63_74_2e_63_72_75_6e_63_68:
              	; @word dict.crunch
              	
82BE: C5      			push	bc
82BF: D5      			push 	de
82C0: E5      			push 	hl
82C1: DDE5    			push 	ix
82C3: 3AF388  			ld 		a,(SIDictionaryPage)				; switch to dictionary page
82C6: CD8886  			call 	PAGESwitch
82C9: DD2100C0			ld 		ix,$C000
82CD:         	DICTCrunchLoop:
82CD: DD7E00  			ld 		a,(ix+0) 							; get offset
82D0: B7      			or 		a
82D1: 2822    			jr 		z,DICTCrunchExit
82D3: DDCB057E			bit 	7,(ix+5)							; private bit set.
82D7: 2813    			jr 		z,DICTCrunchNext
              	
82D9: DDE5    			push 	ix 									; DE = address of word
82DB: D1      			pop 	de
82DC: 2600    			ld 		h,0 								; HL = offset to next.
82DE: DD6E00  			ld 		l,(ix+0)
82E1: 19      			add 	hl,de 								; HL = address of next.
              	
82E2: 7C      			ld 		a,h 								; BC = ~HL number of bytes to copy.
82E3: 2F      			cpl
82E4: 47      			ld 		b,a
82E5: 7D      			ld 		a,l
82E6: 2F      			cpl
82E7: 4F      			ld 		c,a
              	
82E8: EDB0    			ldir 										; copy it
82EA: 18E1    			jr 		DICTCrunchLoop 						; see if the copied over one is private
              	
82EC:         	DICTCrunchNext:
82EC: DD5E00  			ld 		e,(ix+0) 							; offset to DE
82EF: 1600    			ld 		d,0
82F1: DD19    			add 	ix,de 								; and jump there
82F3: 18D8    			jr 		DICTCrunchLoop
              	
82F5:         	DICTCrunchExit:
82F5: DD22EB88			ld 		(SIDictionaryFree),ix 				; update top of dictionary
82F9: DD360000			ld 		(ix+0),0							; write out the end of dictionary marker.
82FD: CDAE86  			call 	PAGERestore 						; restore old page.
8300: DDE1    			pop 	ix
8302: E1      			pop 	hl
8303: D1      			pop 	de
8304: C1      			pop 	bc
8305: C9      			ret
              		include "divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Created : 	29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8306:         	__zfdefine_2f:
              	; @word /
8306: D5      			push 	de
8307: CD1883  			call 	DIVDivideMod16
830A: EB      			ex 		de,hl
830B: D1      			pop 	de
830C: C9      			ret
              	
830D:         	__zfdefine_6d_6f_64:
              	; @word mod
830D: D5      			push 	de
830E: CD1883  			call 	DIVDivideMod16
8311: D1      			pop 	de
8312: C9      			ret
              	
8313:         	__zfdefine_2f_6d_6f_64:
              	; @word /mod
8313: CD1883  			call 	DIVDivideMod16
8316: EB      			ex 		de,hl
8317: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
8318:         	DIVDivideMod16:
              	
8318: C5      		push 	bc
8319: 42      		ld 		b,d 				; DE
831A: 4B      		ld 		c,e
831B: EB      		ex 		de,hl
831C: 210000  		ld 		hl,0
831F: 78      		ld 		a,b
8320: 0608    		ld 		b,8
8322:         	Div16_Loop1:
8322: 17      		rla
8323: ED6A    		adc 	hl,hl
8325: ED52    		sbc 	hl,de
8327: 3001    		jr 		nc,Div16_NoAdd1
8329: 19      		add 	hl,de
832A:         	Div16_NoAdd1:
832A: 10F6    		djnz 	Div16_Loop1
832C: 17      		rla
832D: 2F      		cpl
832E: 47      		ld 		b,a
832F: 79      		ld 		a,c
8330: 48      		ld 		c,b
8331: 0608    		ld 		b,8
8333:         	Div16_Loop2:
8333: 17      		rla
8334: ED6A    		adc 	hl,hl
8336: ED52    		sbc 	hl,de
8338: 3001    		jr 		nc,Div16_NoAdd2
833A: 19      		add 	hl,de
833B:         	Div16_NoAdd2:
833B: 10F6    		djnz 	Div16_Loop2
833D: 17      		rla
833E: 2F      		cpl
833F: 51      		ld 		d,c
8340: 5F      		ld 		e,a
8341: C1      		pop 	bc
8342: C9      		ret
              	
              		include "farmemory.asm"
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Purpose : 	Far Memory code
              	;		Created : 	29th October 2018
              	;
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8343:         	__zfdefine_63_2c:
              	; @word c,
              	
8343: 7D      			ld 	a,l
8344:         	FARCompileByte:
8344: F5      			push 	af 									; save byte and HL
8345: E5      			push 	hl
8346: F5      			push 	af 									; save byte
8347: 3AFB88  			ld		a,(SICodeFreePage) 					; switch to page
834A: CD8886  			call 	PAGESwitch 							; change to current code page.
834D: 2AE788  			ld 		hl,(SICodeFree) 					; write to memory location
8350: F1      			pop 	af
8351: 77      			ld 		(hl),a
8352: 23      			inc 	hl 									; bump memory location
8353: 22E788  			ld 		(SICodeFree),hl 					; write back
8356: CDAE86  			call 	PAGERestore 						; go back to original page
8359: E1      			pop 	hl 									; restore and exit
835A: F1      			pop 	af
835B: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
835C:         	__zfdefine_2c:
              	; @word ,
              	
835C:         	FARCompileWord:
835C: F5      			push 	af 									; save byte and HL
835D: D5      			push 	de
835E: E5      			push 	hl
835F: EB      			ex 		de,hl 								; word into DE
8360: 3AFB88  			ld		a,(SICodeFreePage) 					; switch to page
8363: CD8886  			call 	PAGESwitch 							; change to current code page.
8366: 2AE788  			ld 		hl,(SICodeFree) 					; write to memory location
8369: 73      			ld 		(hl),e
836A: 23      			inc 	hl
836B: 72      			ld 		(hl),d
836C: 23      			inc 	hl
836D: 22E788  			ld 		(SICodeFree),hl 					; write back
8370: CDAE86  			call 	PAGERestore 						; go back to original page
8373: E1      			pop 	hl
8374: D1      			pop 	de 									; restore and exit
8375: F1      			pop 	af
8376: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								  Compile instruction in A
              	;
              	; ***********************************************************************************************
              	
8377:         	__zfdefine_69_2c:
              	; @word i,
              	
8377: 7C      			ld 		a,h 								; check for 1 byte opcode
8378: B7      			or 		a
8379: 2808    			jr  	z,FAROPCShort
              	
837B: E5      			push 	hl 									; compile word with bytes reversed
837C: 65      			ld 		h,l
837D: 6F      			ld 		l,a
837E: CD5C83  			call 	FARCompileWord
8381: E1      			pop 	hl
8382: C9      			ret
              	
8383:         	FAROPCShort: 										; compile byte
8383: 7D      			ld 		a,l
8384: CD4483  			call 	FARCompileByte
8387: C9      			ret
              	
              		include "fillcopy.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		copyfill.asm
              	;		Purpose:	Data Copy and Fill
              	;		Date:		29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Fill C bytes with B starting at A
              	;
              	; *********************************************************************************
              	
8388:         	__zfdefine_66_69_6c_6c:
              	; @word fill
              	;; fill the number of bytes saved using count! with B, starting at address A
              	
8388: 78      			ld 		a,b
8389: B1      			or 		c
838A: C8      			ret 	z
              	
838B: C5      			push 	bc
838C: E5      			push 	hl
              	
838D: 73      	__fill1:ld 		(hl),e
              	
838E: 23      			inc 	hl
838F: 0B      			dec 	bc
8390: 78      			ld 		a,b
8391: B1      			or 		c
8392: 20F9    			jr 		nz,__fill1
              	
8394: E1      			pop 	hl
8395: C1      			pop 	bc
8396: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;							Copy C bytes from B to A
              	;
              	; *********************************************************************************
              	
8397:         	__zfdefine_63_6f_70_79:
              	; @word copy
              	
              	
8397: 78      			ld 		a,b 								; exit now if count zero.
8398: B1      			or 		c
8399: C8      			ret 	z
              	
839A: C5      			push 	bc
839B: D5      			push 	de
839C: E5      			push 	hl
              	
839D: AF      			xor 	a 									; find direction.
839E: ED52    			sbc 	hl,de
83A0: 7C      			ld 		a,h
83A1: 19      			add 	hl,de
83A2: CB7F    			bit 	7,a 								; if +ve use LDDR
83A4: 2807    			jr 		z,__copy2
              	
83A6: EB      			ex 		de,hl 								; LDIR etc do (DE) <- (HL)
83A7: EDB0    			ldir
83A9:         	__copyExit:
83A9: E1      			pop 	hl
83AA: D1      			pop 	de
83AB: C1      			pop 	bc
83AC: C9      			ret
              	
83AD:         	__copy2:
83AD: 09      			add 	hl,bc 								; add length to HL,DE, swap as LDDR does (DE) <- (HL)
83AE: EB      			ex 		de,hl
83AF: 09      			add 	hl,bc
83B0: 1B      			dec 	de 									; -1 to point to last byte
83B1: 2B      			dec 	hl
83B2: EDB8    			lddr
83B4: 18F3    			jr 		__copyExit
              		include "ioroutines.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		ioroutines.asm
              	;		Purpose:	General I/O Routines.
              	;		Date:		29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;							Set Screen Mode
              	;
              	; *********************************************************************************
              	
83B6:         	__zfdefine_69_6f_2e_6d_6f_64_65_2e_34_38_6b:
              	; @word io.mode.48k
              	
83B6: 012E87  			ld 		bc,ZX48KPrint
83B9:         	__SetMode:
83B9: ED431389			ld 		(SIScreenManager),bc
83BD: 1860    			jr 		IOClearScreen
              	
83BF:         	__zfdefine_69_6f_2e_6d_6f_64_65_2e_6c_61_79_65_72_32:
              	; @word io.mode.layer2
              	
83BF: 01B387  			ld 		bc,Layer2Print
83C2: 18F5    			jr 		__SetMode
              	
83C4:         	__zfdefine_69_6f_2e_6d_6f_64_65_2e_6c_6f_77_72_65_73:
              	; @word io.mode.lowres
              	
83C4: 014D88  			ld 		bc,LowResPrint
83C7: 18F0    			jr 		__SetMode
              	
              	; *********************************************************************************
              	;
              	;					Interface to the raw console system
              	;
              	; *********************************************************************************
              	
83C9:         	__zfdefine_69_6f_2e_72_61_77_2e_63_6c_65_61_72:
              	; @word io.raw.clear
              	
83C9: 1854    			jr 		IOClearScreen
              	
83CB:         	__zfdefine_69_6f_2e_72_61_77_2e_63_6f_6c_6f_75_72:
              	; @word io.raw.colour
              	
83CB: 7D      			ld 		a,l
83CC: 1845    			jr 		IOSetColour
              	
83CE:         	__zfdefine_69_6f_2e_72_61_77_2e_70_72_69_6e_74:
              	; @word io.raw.print
83CE: 7D      			ld 		a,l
83CF: E67F    			and 	$7F
83D1: FE20    			cp 		32
83D3: D8      			ret 	c
83D4: 7D      			ld 		a,l
83D5: 1808    			jr 		IOPrintChar
              	
83D7:         	__zfdefine_69_6f_2e_72_61_77_2e_6d_6f_76_65:
              	; @word io.raw.move
83D7: E5      			push 	hl
83D8: 65      			ld 		h,l 							; Y is A.0
83D9: 6B      			ld 		l,e 							; X is B.0
83DA: CD1B84  			call 	IOSetCursor 					; set the cursor
83DD: E1      			pop 	hl
83DE: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;			Print character at cursor position, cursored if bit 7 set
              	;
              	; *********************************************************************************
              	
83DF:         	IOPrintChar:
83DF: F5      			push 	af
83E0: C5      			push 	bc
83E1: D5      			push 	de
83E2: E5      			push	hl
              	
83E3: F5      			push 	af
83E4: 3A2989  			ld 		a,(IOColour)						; colour into C
83E7: 4F      			ld 		c,a
83E8: ED5B2A89			ld 		de,(IOCursorX)						; cursor into (D,E_)
83EC: F1      			pop 	af
83ED: CD0F84  			call 	IODoPrint 							; call print handler
              	
83F0: 3A0B89  			ld 		a,(SIScreenWidth) 					; screen width in B
83F3: 47      			ld 		b,a
83F4: 212A89  			ld 		hl,IOCursorX						; bump cursor x
83F7: 34      			inc 	(hl)
83F8: 7E      			ld 		a,(hl)
83F9: B8      			cp 		b
83FA: 380E    			jr 		c,__IOPrintExit 					; if < width exit.
83FC: AF      			xor 	a 									; if so, reset to zero and go one
83FD: 77      			ld 		(hl),a 								; further down.
              	
83FE: 23      			inc 	hl 									; point to cursor Y
83FF: 34      			inc 	(hl) 								; bump cursor Y
8400: 3A0F89  			ld 		a,(SIScreenHeight) 					; screen height in B
8403: 47      			ld 		b,a
8404: 7E      			ld 		a,(hl)
8405: B8      			cp 		b
8406: 3802    			jr 		c,__IOPrintExit 					; if < height exit
8408: AF      			xor 	a 									; back to top.
8409: 77      			ld 		(hl),a
840A:         	__IOPrintExit:
840A: E1      			pop 	hl 									; exit.
840B: D1      			pop 	de
840C: C1      			pop 	bc
840D: F1      			pop 	af
840E: C9      			ret
              	
840F:         	IODoPrint:
840F: 2A1389  			ld 		hl,(SIScreenManager)
8412: E9      			jp 		(hl)
              	
              	; *********************************************************************************
              	;
              	;									Set Colour
              	;
              	;			0..7 : Black,Blue,Red,Magenta,Green,Cyan,Yellow,White
              	;
              	; *********************************************************************************
              	
8413:         	IOSetColour:
8413: F5      			push 	af
8414: E607    			and 	7
8416: 322989  			ld 		(IOColour),a
8419: F1      			pop 	af
841A: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;									Set Cursor
              	;
              	; *********************************************************************************
              	
841B:         	IOSetCursor:
841B: 222A89  			ld 		(IOCursorX),hl
841E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;							Raw Clear the screen, Set Mode
              	;
              	; *********************************************************************************
              	
841F:         	IOClearScreen:
841F: F5      			push 	af
8420: 3E0C    			ld 		a,12
8422: CD0F84  			call	IODoPrint
8425: 7D      			ld 		a,l
8426: 320B89  			ld 		(SIScreenWidth),a
8429: 7C      			ld 		a,h
842A: 320F89  			ld 		(SIScreenHeight),a
842D: 210000  			ld 		hl,0
8430: CD1B84  			call 	IOSetCursor
8433: 3E07    			ld 		a,7
8435: CD1384  			call 	IOSetColour
8438: F1      			pop 	af
8439: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;									Print HL in hexadecimal
              	;
              	; *********************************************************************************
              	
843A:         	__zfdefine_2e_68_65_78:
              	; @word .hex
843A: 3E20    			ld 		a,' '
843C: CDDF83  			call 	IOPrintChar
843F:         	IOPrintHexWord:
843F: F5      			push 	af
8440: 7C      			ld 		a,h
8441: CD4A84  			call 	IOPrintHexByte
8444: 7D      			ld 		a,l
8445: CD4A84  			call 	IOPrintHexByte
8448: F1      			pop 	af
8449: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Print A in hexadecimal
              	;
              	; *********************************************************************************
              	
844A:         	IOPrintHexByte:
844A: F5      			push 	af
844B: CB0F    			rrc 	a
844D: CB0F    			rrc 	a
844F: CB0F    			rrc 	a
8451: CB0F    			rrc 	a
8453: CD5784  			call 	__PrintNibble
8456: F1      			pop 	af
8457:         	__PrintNibble:
8457: E60F    			and 	15
8459: FE0A    			cp 		10
845B: 3802    			jr 		c,__PNIsDigit
845D: C607    			add 	7
845F:         	__PNIsDigit:
845F: C630    			add 	48
8461: C3DF83  			jp 		IOPrintChar
              	
              	; *********************************************************************************
              	;
              	;						  Print HL as an ASCIIZ string
              	;
              	; *********************************************************************************
              	
8464:         	IOPrintString:
8464: F5      			push 	af
8465: E5      			push 	hl
8466:         	__IOASCIIZ:
8466: 7E      			ld 		a,(hl)
8467: B7      			or 		a
8468: 2806    			jr 		z,__IOASCIIExit
846A: CDDF83  			call	IOPrintChar
846D: 23      			inc 	hl
846E: 18F6    			jr 		__IOASCIIZ
8470:         	__IOASCIIExit:
8470: E1      			pop 	hl
8471: F1      			pop 	af
8472: C9      			ret
              	
              		include "keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date:		29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              	
8473:         	__zfdefine_69_6e_6b_65_79:
              	; @word inkey
8473: EB      			ex 		de,hl
8474: CD7B84  			call 	IOScanKeyboard
8477: 6F      			ld 		l,a
8478: 2600    			ld 		h,0
847A: C9      			ret
              	
847B:         	IOScanKeyboard:
847B: C5      			push 	bc
847C: D5      			push 	de
847D: E5      			push 	hl
              	
847E: 21D084  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8481: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8483: 06FE    			ld 		b,$FE
8485: ED78    			in 		a,(c)
8487: CB47    			bit 	0,a
8489: 2005    			jr 		nz,__kr1
848B: 212085  			ld 		hl,__kr_shift_table
848E: 180B    			jr 		__kr2
8490:         	__kr1:
8490: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8492: ED78    			in 		a,(c)
8494: CB4F    			bit 	1,a
8496: 2003    			jr 		nz,__kr2
8498: 21F884  			ld 		hl,__kr_symbol_shift_table
849B:         	__kr2:
              	
849B: 1EFE    			ld 		e,$FE 								; scan pattern.
849D: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
849E: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
84A0: FEFE    			cp 		$FE
84A2: 2808    			jr 		z,___kr4
84A4: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
84A6: FE7F    			cp 		$7F
84A8: 2802    			jr 		z,___kr4
84AA: 161F    			ld 		d,$01F 								; check all bits.
84AC:         	___kr4:
84AC: 43      			ld 		b,e 								; scan the keyboard
84AD: 0EFE    			ld 		c,$FE
84AF: ED78    			in 		a,(c)
84B1: 2F      			cpl 										; make that active high.
84B2: A2      			and 	d  									; and with check value.
84B3: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
84B5: 23      			inc 	hl 									; next set of keyboard characters
84B6: 23      			inc 	hl
84B7: 23      			inc 	hl
84B8: 23      			inc 	hl
84B9: 23      			inc 	hl
              	
84BA: 7B      			ld 		a,e 								; get pattern
84BB: 87      			add 	a,a 								; shift left
84BC: F601    			or 		1 									; set bit 1.
84BE: 5F      			ld 		e,a
              	
84BF: FEFF    			cp 		$FF 								; finished when all 1's.
84C1: 20DA    			jr 		nz,__kr3
84C3: AF      			xor 	a
84C4: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
84C6:         	__kr_keypressed:
84C6: 23      			inc 	hl  								; shift right until carry set
84C7: 1F      			rra
84C8: 30FC    			jr 		nc,__kr_keypressed
84CA: 2B      			dec 	hl 									; undo the last inc hl
84CB: 7E      			ld 		a,(hl) 								; get the character number.
84CC:         	__kr_exit:
84CC: E1      			pop 	hl
84CD: D1      			pop 	de
84CE: C1      			pop 	bc
84CF: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 16:19 colours 0-3 20-23:Left Down Up Right
              	;	27:Break 32-95: Std ASCII
              	;
84D0:         	__kr_no_shift_table:
84D0: 005A5843			db 		0,  'Z','X','C','V',			'A','S','D','F','G'
84D4: 56415344	
84D8: 4647    	
84DA: 51574552			db 		'Q','W','E','R','T',			'1','2','3','4','5'
84DE: 54313233	
84E2: 3435    	
84E4: 30393837			db 		'0','9','8','7','6',			'P','O','I','U','Y'
84E8: 36504F49	
84EC: 5559    	
84EE: 0D4C4B4A			db 		13, 'L','K','J','H',			' ', 0, 'M','N','B'
84F2: 4820004D	
84F6: 4E42    	
              	
84F8:         	__kr_symbol_shift_table:
84F8: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
84FC: 2F7E7C5C	
8500: 7B7D    	
8502: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
8506: 3E214023	
850A: 2425    	
850C: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8510: 26223B00	
8514: 5D5B    	
8516: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
851A: 5E20002E	
851E: 2C2A    	
              	
8520:         	__kr_shift_table:
8520: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8524: 2F7E7C5C	
8528: 7B7D    	
852A: 0000003C			db 		0,  0,  0  ,'<','>',			16, 17, 18, 19, 20
852E: 3E101112	
8532: 1314    	
8534: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8538: 15223B00	
853C: 5D5B    	
853E: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8542: 5E20002E	
8546: 2C2A    	
              		include "loader.asm"
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		loader.asm
              	;		Purpose : 	Source loader
              	;		Created : 	29th October 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;									Load the bootstrap page
              	;
              	; ********************************************************************************************************
              	
8548:         	LOADBootstrap:
8548: CD5F80  			call 	COMSetExecuteMode
854B: 3AF788  			ld 		a,(SIBootstrapPage)
854E: CD5585  			call 	__LOADBootstrapPage
8551: C31880  			jp 		HaltZ80
              	
              	; ********************************************************************************************************
              	;
              	;										Bootstrap page A
              	;
              	; ********************************************************************************************************
              	
8554:         	__zfdefine_62_6f_6f_74_73_74_72_61_70_2e_70_61_67_65:
              	; @word bootstrap.page
              	
8554: 7D      			ld 		a,l
8555:         	__LOADBootstrapPage:
8555: C5      			push 	bc
8556: D5      			push 	de
8557: E5      			push 	hl
8558: CD8886  			call 	PAGESwitch 							; switch to bootstrap code page
855B: 3E05    			ld 		a,5
855D: CD1384  			call 	IOSetColour
8560: 21AB85  			ld 		hl,__LOADBootMessage
8563: CD6484  			call 	IOPrintString
8566: 2100C0  			ld 		hl,$C000 							; current page being loaded.
              	
8569:         	__LOADBootLoop:
8569: 3E06    			ld 		a,6 								; prompt.
856B: CD1384  			call 	IOSetColour
856E: 3E2E    			ld 		a,'.'
8570: CDDF83  			call 	IOPrintChar
              	
8573: 7E      			ld 		a,(hl) 								; look at that page, anything there ?
8574: B7      			or 		a
8575: 2825    			jr 		z,__LOADBootNext
              	
8577: 110078  			ld 		de,EditBuffer  						; set up to copy to edit buffer
857A: 010002  			ld 		bc,EditBufferSize
857D: E5      			push 	hl 									; save bootstrap code pointer
857E: EDB0    			ldir
8580: 210078  			ld 		hl,EditBuffer 						; look at edit buffer
8583: CDCD86  			call 	PARSEReset 							; parse that string
8586:         	__LOADBootParse:
8586: 0C      			inc 	c
8587: 79      			ld 		a,c
8588: E607    			and 	7
858A: D3FE    			out 	($FE),a
858C: CDD186  			call 	PARSEGet 							; get a word
858F: 380A    			jr 		c,__LOADBootParseDone 				; nothing to do
8591: E5      			push 	hl
8592: CD6A80  			call 	COMCompileExecute 					; do it.
8595: E1      			pop 	hl
8596: DABA85  			jp 		c,__LOADErrorHandler 				; error ?
8599: 18EB    			jr 		__LOADBootParse
              	
859B:         	__LOADBootParseDone:
859B: E1      			pop 	hl 									; restore address
859C:         	__LOADBootNext:
859C: 110002  			ld 		de,EditBufferSize 					; add buffer size to HL
859F: 19      			add 	hl,de
85A0: CB7C    			bit 	7,h 								; until wrapped round to $0000
85A2: 20C5    			jr 		nz,__LOADBootLoop
              	
85A4: CDAE86  			call 	PAGERestore 						; return to original page
85A7: E1      			pop 	hl
85A8: D1      			pop 	de
85A9: C1      			pop 	bc
85AA: C9      			ret
              	
85AB:         	__LOADBootMessage:
85AB: 426F6F74			db 		"Bootstrapping ",0
85AF: 73747261	
85B3: 7070696E	
85B7: 672000  	
              	
85BA:         	__LOADErrorHandler:									; unknown word @ HL
85BA: E5      			push 	hl
85BB: 3E20    			ld 		a,' '
85BD: CDDF83  			call 	IOPrintChar
85C0: 3E07    			ld 		a,7
85C2: CD1384  			call 	IOSetColour
85C5:         	__LOADToEnd: 										; go to end of string
85C5: 7E      			ld 		a,(hl)
85C6: F5      			push 	af
85C7: E63F    			and 	$3F
85C9: EE20    			xor 	$20
85CB: C620    			add 	a,$20
85CD: 77      			ld 		(hl),a
85CE: 23      			inc 	hl
85CF: F1      			pop 	af
85D0: B7      			or 		a
85D1: 20F2    			jr 		nz,__LOADToEnd
85D3: 2B      			dec 	hl
85D4: EB      			ex 		de,hl 								; append text to it.
85D5: 21E185  			ld 		hl,__LOADErrorMessage
85D8: 011D00  			ld 		bc,__LOADErrorMessageEnd-__LOADErrorMessage
85DB: EDB0    			ldir
85DD: E1      			pop 	hl
85DE: C31C80  			jp 		ErrorHandlerHL
              	
85E1:         	__LOADErrorMessage:
85E1: 202D2055			db 		" - Unknown word in bootstrap",0
85E5: 6E6B6E6F	
85E9: 776E2077	
85ED: 6F726420	
85F1: 696E2062	
85F5: 6F6F7473	
85F9: 74726170	
85FD: 00      	
85FE:         	__LOADErrorMessageEnd:
              		include "miscellany.asm"
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		miscellany.asm
              	;		Purpose : 	Miscellany
              	;		Created : 	29th October 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;											Halt the CPU
              	;
              	; ********************************************************************************************************
              	
85FE:         	__zfdefine_68_61_6c_74:
              	; @word halt
85FE: C31880  			jp 		HaltZ80
              	
              	; ********************************************************************************************************
              	;
              	;							Get address / size of editing buffer
              	;
              	; ********************************************************************************************************
              	
8601:         	__zfdefine_65_64_69_74_2e_62_75_66_66_65_72:
              	; @word edit.buffer
              	
8601: EB      			ex 		de,hl
8602: 210078  			ld 		hl,EditBuffer
8605: C9      			ret
              	
8606:         	__zfdefine_65_64_69_74_2e_62_75_66_66_65_72_2e_73_69_7a_65:
              	; @word edit.buffer.size
              	
8606: EB      			ex 		de,hl
8607: 210002  			ld 		hl,EditBufferSize
860A: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;						 Return address of system information table
              	;
              	; ********************************************************************************************************
              	
860B:         	__zfdefine_73_79_73_2e_69_6e_66_6f:
              	; @word sys.info
860B: EB      			ex 		de,hl
860C: 21E788  			ld 		hl,SystemInformation
860F: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;						discard the return stack except for one level
              	;
              	; ********************************************************************************************************
              	
8610:         	__zfdefine_73_74_61_63_6b_2e_72_65_73_65_74:
              	; @word stack.reset
              	
8610: E1      			pop 	hl 									; so we know where to return to.
8611: ED7B0389			ld 		sp,(SIStack)						; load the stack pointer
8615: E9      			jp 		(hl)								; do the return.
              	
              	; ********************************************************************************************************
              	;
              	;				incomplete branch handler - used for forward branches as a dummy target
              	;
              	; ********************************************************************************************************
              	
8616:         	__zfdefine_69_6e_63_6f_6d_70_6c_65_74_65_2e_62_72_61_6e_63_68:
              	; @word incomplete.branch
              	
8616: EB      			ex 		de,hl
8617: 211B86  			ld 		hl,__ICBranchError
861A: C9      			ret
861B:         	__ICBranchError:
861B: 212186  			ld 		hl,__ICBranchText
861E: C31C80  			jp 		ErrorHandlerHL
8621:         	__ICBranchText:
8621: 436F6D65			db 		"Come across an unclosed branch (if without then ?)",0
8625: 20616372	
8629: 6F737320	
862D: 616E2075	
8631: 6E636C6F	
8635: 73656420	
8639: 6272616E	
863D: 63682028	
8641: 69662077	
8645: 6974686F	
8649: 75742074	
864D: 68656E20	
8651: 3F2900  	
              	
              	; ********************************************************************************************************
              	;
              	;								Image save routines (rely on bootloader)
              	;
              	; ********************************************************************************************************
              	
8654:         	__zfdefine_73_61_76_65:
              	; @word save
              	
8654: C3F97F  			jp 		$7FF9
              		include "multiply.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Created : 	29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8657:         	__zfdefine_2a:
              	; @word *
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8657:         	MULTMultiply16:
8657: C5      			push 	bc
8658: D5      			push 	de
8659: 44      			ld 		b,h 							; get multipliers in DE/BC
865A: 4D      			ld 		c,l
865B: 210000  			ld 		hl,0 							; zero total
865E:         	__Core__Mult_Loop:
865E: CB41    			bit 	0,c 							; lsb of shifter is non-zero
8660: 2801    			jr 		z,__Core__Mult_Shift
8662: 19      			add 	hl,de 							; add adder to total
8663:         	__Core__Mult_Shift:
8663: CB38    			srl 	b 								; shift BC right.
8665: CB19    			rr 		c
8667: EB      			ex 		de,hl 							; shift DE left
8668: 29      			add 	hl,hl
8669: EB      			ex 		de,hl
866A: 78      			ld 		a,b 							; loop back if BC is nonzero
866B: B1      			or 		c
866C: 20F0    			jr 		nz,__Core__Mult_Loop
866E: D1      			pop 	de
866F: C1      			pop 	bc
8670: C9      			ret
              		include "paging.asm"
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Purpose : 	Paging code.
              	;		Created : 	29th October 2018
              	;
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Reset Paging, start at Boot Page.
              	;
              	; ***********************************************************************************************
              	
8671:         	__zfdefine_70_61_67_69_6e_67_2e_72_65_73_65_74:
              	; @word paging.reset
              	
8671:         	PAGEReset:
8671: F5      			push 	af
8672: E5      			push 	hl
              	
8673: 211989  			ld 		hl,PAGEStack 						; reset the page stack pointer
8676: 221789  			ld 		(PAGEStackPointer),hl
8679: 3AFF88  			ld 		a,(SIBootPage) 						; get the boot page.
867C: ED9256  			db 		$ED,$92,$56							; set that as the current page
867F: 3C      			inc 	a
8680: ED9257  			db 		$ED,$92,$57
8683: 3D      			dec 	a
8684: 08      			ex 		af,af' 								; put it in the A' register as 'current page'
              	
8685: E1      			pop 	hl
8686: F1      			pop 	af
8687: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;							Switch page to A and push old page on stack.
              	;
              	; ***********************************************************************************************
              	
8688:         	PAGESwitch:
8688: F5      			push 	af
8689: C5      			push 	bc
868A: D5      			push 	de
868B: E5      			push 	hl
              	
868C: 013B24  			ld 		bc,$243B 							; TB Register select
868F: 1656    			ld 		d,$56 								; $56 is paging register $C000-$DFFF
8691: ED51    			out 	(c),d
8693: 013B25  			ld 		bc,$253B 							; TB Register access
8696: ED58    			in 		e,(c) 								; read old page into E
              	
8698: ED9256  			db 		$ED,$92,$56							; Page in the new page at $C000-$DFFF
869B: 3C      			inc 	a
869C: ED9257  			db 		$ED,$92,$57							; and into $E000-$FFFF
869F: 3D      			dec 	a
              	
86A0: 2A1789  			ld 		hl,(PAGEStackPointer)				; push old register on page stack.
86A3: 73      			ld 		(hl),e
86A4: 23      			inc 	hl
86A5: 221789  			ld 		(PAGEStackPointer),hl
              	
86A8: 08      			ex 		af,af'  							; update A'
              	
86A9: E1      			pop 	hl 									; restore registers and exit.
86AA: D1      			pop 	de
86AB: C1      			pop 	bc
86AC: F1      			pop 	af
86AD: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;							Restore previous page (undoes PAGESwitch)
              	;
              	; ***********************************************************************************************
              	
86AE:         	PAGERestore:
86AE: F5      			push 	af
86AF: E5      			push 	hl
              	
86B0: 2A1789  			ld 		hl,(PAGEStackPointer) 				; pop old page register value off stack
86B3: 2B      			dec 	hl
86B4: 7E      			ld 		a,(hl)
86B5: 221789  			ld 		(PAGEStackPointer),hl
              	
86B8: ED9256  			db 		$ED,$92,$56							; Page in the new page at $C000-$DFFF
86BB: 3C      			inc 	a
86BC: ED9257  			db 		$ED,$92,$57							; and into $E000-$FFFF
86BF: 3D      			dec 	a
86C0: 08      			ex 		af,af' 								; update A'
              	
86C1: E1      			pop 	hl
86C2: F1      			pop 	af
86C3: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;					Compile code to call EHL from current compile position
              	;
              	;									Note: this is a filler
              	; ***********************************************************************************************
              	
86C4:         	PAGECreateCodeCallEHL:
86C4: 3ECD    			ld 		a,$CD 								; call <Address>
86C6: CD4483  			call 	FARCompileByte
86C9: CD5C83  			call 	FARCompileWord 						; compile the constant
86CC: C9      			ret
              		include "parser.asm"
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	;
              	;		Name : 		parsing.asm
              	;		Purpose : 	Parsing code.
              	;		Created : 	29th October 2018
              	;
              	; ***********************************************************************************************
              	; ***********************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Reset,parsing pointer (to HL)
              	;
              	; ***********************************************************************************************
              	
86CD:         	__zfdefine_70_61_72_73_65_72_2e_73_65_74_75_70:
              	; @word parser.setup
              	
86CD:         	PARSEReset:
86CD: 222C89  		ld 		(PARSEPointer),hl
86D0: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;		   Get next word. Returns pointer to word parsed in HL, and CC, or HL = 0 and CS.
              	;
              	; ***********************************************************************************************
              	
86D1:         	__zfdefine_70_61_72_73_65_72_2e_67_65_74:
              	; @word parser.get
              	
86D1:         	PARSEGet:
86D1: C5      		push 	bc
86D2: D5      		push 	de
86D3: 2A2C89  		ld 		hl,(PARSEPointer)
86D6:         	__PGSkipSpaces:
86D6: 7E      		ld 		a,(hl) 									; get first character, save in B
86D7: 47      		ld 		b,a
86D8: B7      		or 		a
86D9: 2821    		jr 		z,__PGFail
86DB: 23      		inc 	hl 										; bump pointer
86DC: FE20    		cp 		' ' 									; loop back if space
86DE: 28F6    		jr 		z,__PGSkipSpaces
86E0: 112E89  		ld 		de,PARSEBuffer 							; DE is the buffer.
86E3:         	__PGLoadBuffer:
86E3: 78      		ld 		a,b
86E4: 12      		ld 		(de),a 									; copy text into buffer
86E5: 13      		inc 	de
86E6: 7E      		ld 		a,(hl) 									; get next character, save in B
86E7: 47      		ld 		b,a
86E8: B7      		or 		a
86E9: 2805    		jr 		z,__PGReadWord
86EB: 23      		inc 	hl 										; bump pointer.
86EC: FE20    		cp 		' ' 									; if not space, loop
86EE: 20F3    		jr 		nz,__PGLoadBuffer
              	
86F0:         	__PGReadWord:
86F0: AF      		xor 	a 										; put EOS marker on string.
86F1: 12      		ld 		(de),a
86F2: 222C89  		ld 		(PARSEPointer),hl 						; update parse pointer.
86F5: 212E89  		ld 		hl,PARSEBuffer 							; HL points to buffer
86F8: AF      		xor 	a 										; clear carry.
86F9: D1      		pop 	de
86FA: C1      		pop 	bc
86FB: C9      		ret
              	
86FC:         	__PGFail:											; no word available.
86FC: 222C89  		ld 		(PARSEPointer),hl 						; update parse pointer.
86FF: 210000  		ld 		hl,$0000 								; return zero.
8702: 37      		scf 											; set carry
8703: D1      		pop 	de
8704: C1      		pop 	bc
8705: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;		   			Get next word as above but fail if nothing found
              	;
              	; ***********************************************************************************************
              	
8706:         	__zfdefine_70_61_72_73_65_72_2e_67_65_74_2e_63_68_65_63_6b:
              	; @word parser.get.check
8706:         	PARSEGetCheck:
8706: CDD186  		call 	PARSEGet
8709: D0      		ret 	nc 										; exit if okay
870A: 211087  		ld 		hl,__PARSEGCMsg
870D: C31C80  		jp 		ErrorHandlerHL
8710:         	__PARSEGCMsg:
8710: 576F7264		db 		"Word missing in code",0
8714: 206D6973	
8718: 73696E67	
871C: 20696E20	
8720: 636F6465	
8724: 00      	
              	
              	; ***********************************************************************************************
              	;
              	;		   	Get next word as above but fail if nothing foun, then add to dictionary
              	;
              	; ***********************************************************************************************
              	
8725:         	__zfdefine_70_61_72_73_65_72_2e_67_65_74_2e_63_68_65_63_6b_2e_61_64_64:
              	; @word parser.get.check.add
8725: CD0687  		call 	PARSEGetCheck
8728: C3E581  		jp 		DICTAdd
872B: C31C80  		jp 		ErrorHandlerHL
              	
              		include "screen48k.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled.
              	;		Date:		29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;							Print character or function
              	; 							===========================
              	;
              	;	12 		Initialise, Clear screen, and return sizes (L = XSize,H = YSize)
              	;   32-127	Print character A at (D,E) in colour C.
              	;
              	; *********************************************************************************
              	
872E:         	ZX48KPrint:
872E: FE0C    			cp 		12									; is it clear screen (also initialises)
8730: 2029    			jr 		nz,ZXWriteCharacter 				; no, it's a character.
              	
              	; *********************************************************************************
              	;
              	;								Clear the screen
              	;
              	; *********************************************************************************
              	
8732: F5      			push 	af 									; save registers
8733: C5      			push 	bc
              	
8734: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8737: 3E00    			ld 		a,0 								; disable Layer 2
8739: ED79    			out 	(c),a
873B: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
873F: 210040  			ld 		hl,$4000 							; clear pixel memory
8742: 3600    	__cs1:	ld 		(hl),0
8744: 23      			inc 	hl
8745: 7C      			ld 		a,h
8746: FE58    			cp 		$58
8748: 20F8    			jr 		nz,__cs1
874A: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
874C: 23      			inc 	hl
874D: 7C      			ld 		a,h
874E: FE5B    			cp 		$5B
8750: 20F8    			jr 		nz,__cs2
8752: AF      			xor 	a 									; border off
8753: D3FE    			out 	($FE),a
8755: C1      			pop 	bc
8756: F1      			pop 	af
8757: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
875A: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character A on the screen at H,L, in colour C
              	;
              	; *********************************************************************************
              	
875B:         	ZXWriteCharacter:
875B: F5      			push 	af 									; save registers
875C: C5      			push 	bc
875D: D5      			push 	de
875E: E5      			push 	hl
              	
875F: D5      			push 	de
8760: F5      			push 	af
              	;
              	;		work out attribute position
              	;
8761: C5      			push 	bc
8762: 6A      			ld 		l,d 								; for position DE calculate
8763: 2600    			ld 		h,0 								; the attribute location.
8765: 29      			add 	hl,hl
8766: 29      			add 	hl,hl
8767: 29      			add 	hl,hl
8768: 29      			add 	hl,hl
8769: 29      			add 	hl,hl
876A: 4B      			ld 		c,e
876B: 0658    			ld 		b,$58
876D: 09      			add 	hl,bc
876E: C1      			pop 	bc
              	
876F: 79      			ld 		a,c 								; get current colour
8770: E607    			and 	7  									; mask 0..2
8772: F640    			or 		$40  								; make bright
8774: 77      			ld 		(hl),a 								; store it.
              	
8775: F1      			pop 	af 									; get character
8776: CB7F    			bit 	7,a 								; if no cursor skip
8778: 2802    			jr 		z,__ZXWNoCursor
877A: CBFE    			set 	7,(hl)
877C:         	__ZXWNoCursor:
              	;
              	;		char# 32-127 to font address
              	;
877C: E67F    			and 	$7F 								; bits 0-6 only.
877E: D620    			sub 	32
8780: 6F      			ld 		l,a 								; put in HL
8781: 2600    			ld 		h,0
8783: 29      			add 	hl,hl 								; x 8
8784: 29      			add 	hl,hl
8785: 29      			add 	hl,hl
8786: ED5B0789			ld 		de,(SIFontBase) 					; add the font base.
878A: 19      			add 	hl,de
878B: EB      			ex 		de,hl 								; put in DE (font address)
              	;
              	;		calculate screen position.
              	;
878C: C1      			pop 	bc
878D: 79      			ld 		a,c 								; lower 5 bits is X position.
878E: E61F    			and 	31
8790: 6F      			ld 		l,a
8791: 78      			ld 		a,b 								; get Y position
8792: FE18    			cp 		24
8794: 3018    			jr 		nc,__wcexit
8796: E607    			and 	7
8798: CB0F    			rrc 	a 									; rotate into bits 5-7
879A: CB0F    			rrc 	a
879C: CB0F    			rrc 	a
879E: B5      			or 		l
879F: 6F      			ld 		l,a
87A0: 78      			ld 		a,b
87A1: E618    			and 	$18
87A3: F640    			or 		$40
87A5: 67      			ld 		h,a
              	;
              	;		copy font data to screen position.
              	;
87A6: 0608    			ld 		b,8 								; copy 8 characters
              	
87A8:         	__ZXWCCopy:
87A8: 1A      			ld 		a,(de)								; 0
87A9: 77      			ld 		(hl),a
87AA: 24      			inc 	h
87AB: 13      			inc 	de
87AC: 10FA    			djnz 	__ZXWCCopy
              	
87AE:         	__wcexit:
87AE: E1      			pop 	hl 									; restore and exit
87AF: D1      			pop 	de
87B0: C1      			pop 	bc
87B1: F1      			pop 	af
87B2: C9      			ret
              		include "screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date:		29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;							Print character or function
              	; 							===========================
              	;
              	;	12 		Initialise, Clear screen, and return sizes (L = XSize,H = YSize)
              	;   32-127	Print character A at (D,E) in colour C.
              	;
              	; *********************************************************************************
              	
87B3:         	Layer2Print:
87B3: FE0C    			cp 		12									; is it clear screen (also initialises)
87B5: 202A    			jr 		nz,L2PrintCharacter
              	
87B7: F5      			push 	af
87B8: C5      			push 	bc
87B9: D5      			push 	de
87BA: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes band enable Sprites
              	
87BE: 1E02    			ld 		e,2 								; 3 banks to erase
87C0:         	L2PClear:
87C0: 7B      			ld 		a,e 								; put bank number in bits 6/7
87C1: CB0F    			rrc 	a
87C3: CB0F    			rrc 	a
87C5: F603    			or 		2+1 								; shadow on, visible, enable write paging
87C7: 013B12  			ld 		bc,$123B 							; out to layer 2 port
87CA: ED79    			out 	(bc),a
87CC: 210040  			ld 		hl,$4000 							; erase the bank to $00
87CF:         	L2PClearBank: 										; assume default palette :)
87CF: 2B      			dec 	hl
87D0: 3600    			ld 		(hl),$00
87D2: 7C      			ld 		a,h
87D3: B5      			or 		l
87D4: 20F9    			jr		nz,L2PClearBank
87D6: 1D      			dec 	e
87D7: F2C087  			jp 		p,L2PClear
              	
              	
87DA: D1      			pop 	de
87DB: C1      			pop 	bc
87DC: F1      			pop 	af
87DD: 212018  			ld 		hl,$1820 							; still 32 x 24
87E0: C9      			ret
              	
87E1:         	L2PrintCharacter:
87E1: F5      			push 	af
87E2: C5      			push 	bc
87E3: D5      			push 	de
87E4: E5      			push 	hl
87E5: DDE5    			push 	ix
              	
87E7: F5      			push 	af
87E8: AF      			xor 	a 									; convert colour in C to palette index
87E9: CB41    			bit 	0,c 								; (assumes standard palette)
87EB: 2802    			jr 		z,__L2Not1
87ED: F603    			or 		$03
87EF:         	__L2Not1:
87EF: CB51    			bit 	2,c
87F1: 2802    			jr 		z,__L2Not2
87F3: F61C    			or 		$1C
87F5:         	__L2Not2:
87F5: CB49    			bit 	1,c
87F7: 2802    			jr 		z,__L2Not3
87F9: F6C0    			or 		$C0
87FB:         	__L2Not3:
87FB: 4F      			ld 		c,a 								; C is foreground
87FC: 0600    			ld 		b,0									; B is background
              	
87FE: F1      			pop 	af 									; restore char
87FF: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8801: 2802    			jr 		z,__L2NotCursor
8803: 0692    			ld 		b,$49*2 							; light grey is cursor
8805:         	__L2NotCursor:
8805: E67F    			and 	$7F 								; offset from space
8807: D620    			sub 	$20
8809: 6F      			ld 		l,a 								; put into HL
880A: 2600    			ld 		h,0
880C: 29      			add 	hl,hl 								; x 8
880D: 29      			add 	hl,hl
880E: 29      			add 	hl,hl
880F: E5      			push 	hl 									; transfer to IX
8810: DDE1    			pop 	ix
8812: C5      			push 	bc 									; add the font base to it.
8813: ED4B0789			ld 		bc,(SIFontBase)
8817: DD09    			add 	ix,bc
8819: C1      			pop 	bc
              			;
              			;	calculate X * 8 + Y * 8 * 256
              			;
881A: EB      			ex 		de,hl 								; coordinates in HL
881B: 29      			add 	hl,hl 								; multiply by 8 keeping overflow
881C: 29      			add 	hl,hl
881D: 29      			add 	hl,hl
              	
881E: C5      			push 	bc
881F: 7C      			ld 		a,h
8820: E6C0    			and 	$C0
8822: F603    			or 		2+1 								; shadow on, visible, enable write paging
8824: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8827: ED79    			out 	(bc),a
8829: C1      			pop 	bc
              	
882A: 7C      			ld 		a,h 								; force into range $0000-$3FFF
882B: E63F    			and 	$3F
882D: 67      			ld 		h,a
              	
882E: 1E08    			ld 		e,8 								; do 8 rows
8830:         	__L2Outer:
8830: E5      			push 	hl 									; save start
8831: 1608    			ld 		d,8 								; do 8 columns
8833: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8836: DD23    			inc 	ix
8838:         	__L2Loop:
8838: 70      			ld 		(hl),b 								; background
8839: 87      			add 	a,a 								; shift pattern left
883A: 3001    			jr 		nc,__L2NotSet
883C: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
883D:         	__L2NotSet:
883D: 23      			inc 	hl
883E: 15      			dec 	d 									; do a row
883F: 20F7    			jr 		nz,	__L2Loop
8841: E1      			pop 	hl 									; restore, go 256 bytes down.
8842: 24      			inc 	h
8843: 1D      			dec 	e 									; do 8 rows
8844: 20EA    			jr 		nz,__L2Outer
              	
8846: DDE1    			pop 	ix
8848: E1      			pop 	hl
8849: D1      			pop 	de
884A: C1      			pop 	bc
884B: F1      			pop 	af
884C: C9      			ret
              	
              		include "screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date:		29th October 2018
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;							Print character or function
              	; 							===========================
              	;
              	;	12 		Initialise, Clear screen, and return sizes (L = XSize,H = YSize)
              	;   32-127	Print character A at (D,E) in colour C.
              	;
              	; *********************************************************************************
              	
884D:         	LowResPrint:
884D: FE0C    			cp 		12									; is it clear screen (also initialises)
884F: 2024    			jr 		nz,LowPrintCharacter
              	
8851: F5      			push 	af
8852: C5      			push 	bc
8853: D5      			push 	de
              	
8854: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8858: AF      			xor 	a 									; layer 2 off.
8859: 013B12  			ld 		bc,$123B 							; out to layer 2 port
885C: ED79    			out 	(bc),a
              	
885E: 210040  			ld 		hl,$4000 							; erase the bank to $00
8861: 110060  			ld 		de,$6000
8864:         	LowClearScreen: 									; assume default palette :)
8864: AF      			xor 	a
8865: 77      			ld 		(hl),a
8866: 12      			ld 		(de),a
8867: 23      			inc 	hl
8868: 13      			inc 	de
8869: 7C      			ld 		a,h
886A: FE58    			cp 		$58
886C: 20F6    			jr		nz,LowClearScreen
886E: D1      			pop 	de
886F: C1      			pop 	bc
8870: F1      			pop 	af
8871: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8874: C9      			ret
              	
8875:         	LowPrintCharacter:
8875: F5      			push 	af
8876: C5      			push 	bc
8877: D5      			push 	de
8878: E5      			push 	hl
8879: DDE5    			push 	ix
              	
887B: F5      			push 	af
887C: 79      			ld 		a,c 								; only lower 3 bits of colour
887D: E607    			and 	7
887F: 4F      			ld 		c,a 								; C is foreground
8880: 0600    			ld 		b,0									; B is background
              	
8882: F1      			pop 	af 									; restore char
8883: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8885: 2806    			jr 		z,__LowNotCursor
8887: F5      			push 	af
8888: 79      			ld 		a,c 								; reverse colours
8889: EE07    			xor 	7
888B: 47      			ld 		b,a
888C: F1      			pop 	af
888D:         	__LowNotCursor:
888D: E67F    			and 	$7F 								; offset from space
888F: D620    			sub 	$20
8891: 6F      			ld 		l,a 								; put into HL
8892: 2600    			ld 		h,0
8894: 29      			add 	hl,hl 								; x 8
8895: 29      			add 	hl,hl
8896: 29      			add 	hl,hl
8897: E5      			push 	hl 									; transfer to IX
8898: DDE1    			pop 	ix
889A: C5      			push 	bc 									; add the font base to it.
889B: ED4B0789			ld 		bc,(SIFontBase)
889F: DD09    			add 	ix,bc
88A1: C1      			pop 	bc
              			;
              			;	calculate X * 8 + Y * 128 * 8
              			;
88A2: 7A      			ld 		a,d 								; remove top/bottom half
88A3: FE06    			cp 		6
88A5: 3802    			jr 		c,__LowNotLower
88A7: D606    			sub 	6
88A9:         	__LowNotLower:
88A9: 67      			ld 		h,a 								; HL = Y * 256
88AA: 2E00    			ld 		l,0
88AC: CB3C    			srl 	h 									; HL = Y * 128
88AE: CB1D    			rr 		l
88B0: 7B      			ld 		a,e 								; HL = Y * 128 + X
88B1: 85      			add 	l 									; add into HL.
88B2: 6F      			ld 		l,a
88B3: 29      			add 	hl,hl 								; multiply by 8
88B4: 29      			add 	hl,hl
88B5: 29      			add 	hl,hl
              	
88B6: 7C      			ld 		a,h 								; force into range $4000-$57FF
88B7: E63F    			and 	$3F
88B9: F640    			or 		$40
88BB: 67      			ld 		h,a
              	
88BC: 7A      			ld 		a,d 								; if was rows 6..11
88BD: FE06    			cp 		6
88BF: 3802    			jr 		c,__LowNotLower2
88C1: CBEC    			set 	5,h 								; put at $6000-$77FF
88C3:         	__LowNotLower2:
88C3: 1E08    			ld 		e,8 								; do 8 rows
88C5:         	__LowOuter:
88C5: E5      			push 	hl 									; save start
88C6: 1608    			ld 		d,8 								; do 8 columns
88C8: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
88CB: DD23    			inc 	ix
88CD:         	__LowLoop:
88CD: 70      			ld 		(hl),b 								; background
88CE: 87      			add 	a,a 								; shift pattern left
88CF: 3001    			jr 		nc,__LowNotSet
88D1: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
88D2:         	__LowNotSet:
88D2: 23      			inc 	hl
88D3: 15      			dec 	d 									; do a row
88D4: 20F7    			jr 		nz,	__LowLoop
88D6: E1      			pop 	hl 									; restore, go 256 bytes down.
88D7: D5      			push 	de
88D8: 118000  			ld 		de,128
88DB: 19      			add 	hl,de
88DC: D1      			pop 	de
88DD: 1D      			dec 	e 									; do 8 rows
88DE: 20E5    			jr 		nz,__LowOuter
              	
88E0: DDE1    			pop 	ix
88E2: E1      			pop 	hl
88E3: D1      			pop 	de
88E4: C1      			pop 	bc
88E5: F1      			pop 	af
88E6: C9      			ret
              	
              				include "data.asm"						; data allocation.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		29th October 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
0200:         	EditBufferSize = 512
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
88E7:         	SystemInformation:
              	
88E7:         	SICodeFree:			
88E7: 00A00000			dw 		FreeMemory,0 						; +0  Next free byte for code/data
88EB:         	SIDictionaryFree:
88EB: 00C00000			dw 		$C000,0 							; +4  Next free byte in dictionary
88EF:         	SIBootAddress:
88EF: 48850000			dw 		LOADBootstrap,0						; +8  Boot address
88F3:         	SIDictionaryPage:
88F3: 20000000			dw 		$20,0								; +12 Page Number of dictionary
88F7:         	SIBootstrapPage:	
88F7: 22000000			dw 		$22,0 								; +16 Page Number of bootstrap page
88FB:         	SICodeFreePage:
88FB: 24000000			dw 		$24,0 								; +20 Page Number, next free code.
88FF:         	SIBootPage:	
88FF: 24000000			dw 		$24,0 								; +24 Boot page
8903:         	SIStack:
8903: FE7F0000			dw 		StackTop,0							; +28 Initial stack value
8907:         	SIFontBase:	
8907: 003D0000			dw 		$3D00,0								; +32 Base address of font (space)
890B:         	SIScreenWidth:
890B: 20000000			dw 		32,0 								; +36 Screen width, characters
890F:         	SIScreenHeight:
890F: 18000000			dw 		24,0 								; +40 Screen height, characters
8913:         	SIScreenManager:
8913: 2E870000			dw 		ZX48KPrint,0 						; +44 Hardware Console Driver
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
              	;
              	;		The edit buffer and stack are moved into memory not used by the LoRes mode.
              	;
7800:         	EditBuffer = 	$7800 								; Editor Buffer
              	
7FFE:         	StackTop   = 	$7FFE 								; Top of stack
              	
              	
8917:         	PAGEStackPointer:									; stack for PAGEswitch and restore
8917: 0000    			dw 		0
8919:         	PAGEStack:
8919: FFFFFFFF			ds 		16
891D: FF...   	
              	
8929:         	IOColour:											; screen colour
8929: 07      			db 		7
892A:         	IOCursorX: 											; position on screen.
892A: 00      			db 		0
892B:         	IOCursorY:
892B: 00      			db 		0
              	
892C:         	PARSEPointer: 										; next character to parse.
892C: 0000    			dw 		0
892E:         	PARSEBuffer: 										; buffer for parsed word.
892E: FFFFFFFF			ds 		64
8932: FF...   	
              	
896E:         	COMIsCompileMode: 									; 0 = execute mode, #0 = compiler mode.
896E: 00      			db 		0
              	
896F:         	COMARegister:
896F: 0000    			dw 		0 									; Registers in execute mode (or macros in
8971:         	COMBRegister:										; compile mode)
8971: 0000    			dw 		0
8973:         	COMCRegister:
8973: 0000    			dw 		0
              	
8975:         	DICTLastTypeByte:						
8975: 0000    			dw 		0									; address of last type byte.
              	
8977:         	CFCount:											; Count bytes for fill and copy.
8977: 0000    			dw 		0 
              	
              	
8979:         	AlternateFont: 										; alternate font.
              			include "font.inc"							; Daniel Hepper's Font.
8979: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
897D: 00000000	
8981: 0C1E1E0C	
8985: 0C000C00	
8989: 36360000	
898D: 00000000	
8991: 36367F36	
8995: 7F363600	
8999: 183E603C	
899D: 067C1800	
89A1: 0063660C	
89A5: 18336300	
89A9: 1C361C3B	
89AD: 6E663B00	
89B1: 30306000	
89B5: 00000000	
89B9: 0C183030	
89BD: 30180C00	
89C1: 30180C0C	
89C5: 0C183000	
89C9: 00331E7F	
89CD: 1E330000	
89D1: 0018187E	
89D5: 18180000	
89D9: 00000000	
89DD: 00181830	
89E1: 0000007E	
89E5: 00000000	
89E9: 00000000	
89ED: 00181800	
89F1: 03060C18	
89F5: 30604000	
89F9: 3E63676F	
89FD: 7B733E00	
8A01: 18381818	
8A05: 18187E00	
8A09: 3C66061C	
8A0D: 30667E00	
8A11: 3C66061C	
8A15: 06663C00	
8A19: 0E1E3666	
8A1D: 7F060F00	
8A21: 7E607C06	
8A25: 06663C00	
8A29: 1C30607C	
8A2D: 66663C00	
8A31: 7E66060C	
8A35: 18181800	
8A39: 3C66663C	
8A3D: 66663C00	
8A41: 3C66663E	
8A45: 060C3800	
8A49: 00181800	
8A4D: 00181800	
8A51: 00181800	
8A55: 00181830	
8A59: 0C183060	
8A5D: 30180C00	
8A61: 00007E00	
8A65: 007E0000	
8A69: 30180C06	
8A6D: 0C183000	
8A71: 3C66060C	
8A75: 18001800	
8A79: 3E636F6F	
8A7D: 6F603C00	
8A81: 183C6666	
8A85: 7E666600	
8A89: 7E33333E	
8A8D: 33337E00	
8A91: 1E336060	
8A95: 60331E00	
8A99: 7C363333	
8A9D: 33367C00	
8AA1: 7F31343C	
8AA5: 34317F00	
8AA9: 7F31343C	
8AAD: 34307800	
8AB1: 1E336060	
8AB5: 67331F00	
8AB9: 6666667E	
8ABD: 66666600	
8AC1: 3C181818	
8AC5: 18183C00	
8AC9: 0F060606	
8ACD: 66663C00	
8AD1: 7333363C	
8AD5: 36337300	
8AD9: 78303030	
8ADD: 31337F00	
8AE1: 63777F7F	
8AE5: 6B636300	
8AE9: 63737B6F	
8AED: 67636300	
8AF1: 1C366363	
8AF5: 63361C00	
8AF9: 7E33333E	
8AFD: 30307800	
8B01: 3C666666	
8B05: 6E3C0E00	
8B09: 7E33333E	
8B0D: 36337300	
8B11: 3C667038	
8B15: 0E663C00	
8B19: 7E5A1818	
8B1D: 18183C00	
8B21: 66666666	
8B25: 66667E00	
8B29: 66666666	
8B2D: 663C1800	
8B31: 6363636B	
8B35: 7F776300	
8B39: 6363361C	
8B3D: 1C366300	
8B41: 6666663C	
8B45: 18183C00	
8B49: 7F63460C	
8B4D: 19337F00	
8B51: 3C303030	
8B55: 30303C00	
8B59: 6030180C	
8B5D: 06030100	
8B61: 3C0C0C0C	
8B65: 0C0C3C00	
8B69: 081C3663	
8B6D: 00000000	
8B71: 00000000	
8B75: 0000007F	
8B79: 18180C00	
8B7D: 00000000	
8B81: 00003C06	
8B85: 3E663B00	
8B89: 7030303E	
8B8D: 33336E00	
8B91: 00003C66	
8B95: 60663C00	
8B99: 0E06063E	
8B9D: 66663B00	
8BA1: 00003C66	
8BA5: 7E603C00	
8BA9: 1C363078	
8BAD: 30307800	
8BB1: 00003B66	
8BB5: 663E067C	
8BB9: 7030363B	
8BBD: 33337300	
8BC1: 18003818	
8BC5: 18183C00	
8BC9: 06000606	
8BCD: 0666663C	
8BD1: 70303336	
8BD5: 3C367300	
8BD9: 38181818	
8BDD: 18183C00	
8BE1: 0000667F	
8BE5: 7F6B6300	
8BE9: 00007C66	
8BED: 66666600	
8BF1: 00003C66	
8BF5: 66663C00	
8BF9: 00006E33	
8BFD: 333E3078	
8C01: 00003B66	
8C05: 663E060F	
8C09: 00006E3B	
8C0D: 33307800	
8C11: 00003E60	
8C15: 3C067C00	
8C19: 08183E18	
8C1D: 181A0C00	
8C21: 00006666	
8C25: 66663B00	
8C29: 00006666	
8C2D: 663C1800	
8C31: 0000636B	
8C35: 7F7F3600	
8C39: 00006336	
8C3D: 1C366300	
8C41: 00006666	
8C45: 663E067C	
8C49: 00007E4C	
8C4D: 18327E00	
8C51: 0E181870	
8C55: 18180E00	
8C59: 0C0C0C00	
8C5D: 0C0C0C00	
8C61: 7018180E	
8C65: 18187000	
8C69: 3B6E0000	
8C6D: 00000000	
8C71: 00...   	
              	
              	
8C79: FFFFFFFF			org 	$A000
8C7D: FF...   	
A000:         	FreeMemory:
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: FFFFFFFF			ds 		$4000								; end of dictionary marker.
C004: FF...   	
              			


; +++ segments +++

#CODE          = $8000 = 32768,  size = $8000 = 32768

; +++ global symbols +++

AlternateFont                                     = $8979 = 35193          data.asm:95 (unused)
Boot                                              = $8006 = 32774          kernel.asm:17
CFCount                                           = $8977 = 35191          data.asm:91 (unused)
COMARegister                                      = $896F = 35183          data.asm:81
COMBRegister                                      = $8971 = 35185          data.asm:83
COMCRegister                                      = $8973 = 35187          data.asm:85
COMCompileExecute                                 = $806A = 32874          compile.asm:43
COMConstantCode                                   = $8116 = 33046          compile.asm:196
COMExecuteEHL                                     = $8124 = 33060          compile.asm:210
COMIsCompileMode                                  = $896E = 35182          data.asm:78
COMSetExecuteMode                                 = $805F = 32863          compile.asm:19
CONSTConvert                                      = $8148 = 33096          constant.asm:17
DICTAdd                                           = $81E5 = 33253          dictionary.asm:27
DICTCalculateHash                                 = $82A2 = 33442          dictionary.asm:154
DICTCrunchExit                                    = $82F5 = 33525          dictionary.asm:233
DICTCrunchLoop                                    = $82CD = 33485          dictionary.asm:204
DICTCrunchNext                                    = $82EC = 33516          dictionary.asm:227
DICTFind                                          = $8241 = 33345          dictionary.asm:84
DICTLastTypeByte                                  = $8975 = 35189          data.asm:88
DICTXorType                                       = $82A9 = 33449          dictionary.asm:173 (unused)
DIVDivideMod16                                    = $8318 = 33560          divide.asm:38
DebugCode                                         = $8191 = 33169          debug.asm:14 (unused)
Div16_Loop1                                       = $8322 = 33570          divide.asm:47
Div16_Loop2                                       = $8333 = 33587          divide.asm:61
Div16_NoAdd1                                      = $832A = 33578          divide.asm:53
Div16_NoAdd2                                      = $833B = 33595          divide.asm:67
EHHalt                                            = $8021 = 32801          kernel.asm:32
EditBuffer                                        = $7800 = 30720          data.asm:56
EditBufferSize                                    = $0200 =   512          data.asm:12
ErrorHandlerHL                                    = $801C = 32796          kernel.asm:29
FARCompileByte                                    = $8344 = 33604          farmemory.asm:21
FARCompileWord                                    = $835C = 33628          farmemory.asm:46
FAROPCShort                                       = $8383 = 33667          farmemory.asm:85
FreeMemory                                        = $A000 = 40960          data.asm:99
HaltZ80                                           = $8018 = 32792          kernel.asm:25
IOClearScreen                                     = $841F = 33823          ioroutines.asm:152
IOColour                                          = $8929 = 35113          data.asm:66
IOCursorX                                         = $892A = 35114          data.asm:68
IOCursorY                                         = $892B = 35115          data.asm:70 (unused)
IODoPrint                                         = $840F = 33807          ioroutines.asm:117
IOPrintChar                                       = $83DF = 33759          ioroutines.asm:78
IOPrintHexByte                                    = $844A = 33866          ioroutines.asm:192
IOPrintHexWord                                    = $843F = 33855          ioroutines.asm:177
IOPrintString                                     = $8464 = 33892          ioroutines.asm:215
IOScanKeyboard                                    = $847B = 33915          keyboard.asm:25
IOSetColour                                       = $8413 = 33811          ioroutines.asm:129
IOSetCursor                                       = $841B = 33819          ioroutines.asm:142
L2PClear                                          = $87C0 = 34752          screen_layer2.asm:31
L2PClearBank                                      = $87CF = 34767          screen_layer2.asm:39
L2PrintCharacter                                  = $87E1 = 34785          screen_layer2.asm:55
LOADBootstrap                                     = $8548 = 34120          loader.asm:17
Layer2Print                                       = $87B3 = 34739          screen_layer2.asm:21
LowClearScreen                                    = $8864 = 34916          screen_lores.asm:36
LowPrintCharacter                                 = $8875 = 34933          screen_lores.asm:51
LowResPrint                                       = $884D = 34893          screen_lores.asm:21
MULTMultiply16                                    = $8657 = 34391          multiply.asm:20 (unused)
PAGECreateCodeCallEHL                             = $86C4 = 34500          paging.asm:105
PAGEReset                                         = $8671 = 34417          paging.asm:20
PAGERestore                                       = $86AE = 34478          paging.asm:79
PAGEStack                                         = $8919 = 35097          data.asm:63
PAGEStackPointer                                  = $8917 = 35095          data.asm:61
PAGESwitch                                        = $8688 = 34440          paging.asm:43
PARSEBuffer                                       = $892E = 35118          data.asm:75
PARSEGet                                          = $86D1 = 34513          parser.asm:33
PARSEGetCheck                                     = $8706 = 34566          parser.asm:84
PARSEPointer                                      = $892C = 35116          data.asm:73
PARSEReset                                        = $86CD = 34509          parser.asm:20
SIBootAddress                                     = $88EF = 35055          data.asm:26
SIBootPage                                        = $88FF = 35071          data.asm:34
SIBootstrapPage                                   = $88F7 = 35063          data.asm:30
SICodeFree                                        = $88E7 = 35047          data.asm:22
SICodeFreePage                                    = $88FB = 35067          data.asm:32
SIDictionaryFree                                  = $88EB = 35051          data.asm:24
SIDictionaryPage                                  = $88F3 = 35059          data.asm:28
SIFontBase                                        = $8907 = 35079          data.asm:38
SIScreenHeight                                    = $890F = 35087          data.asm:42
SIScreenManager                                   = $8913 = 35091          data.asm:44
SIScreenWidth                                     = $890B = 35083          data.asm:40
SIStack                                           = $8903 = 35075          data.asm:36
StackTop                                          = $7FFE = 32766          data.asm:58
SystemInformation                                 = $88E7 = 35047          data.asm:20
ZX48KPrint                                        = $872E = 34606          screen48k.asm:22
ZXWriteCharacter                                  = $875B = 34651          screen48k.asm:64
__COMCAddress                                     = $80A5 = 32933          compile.asm:99
__COMCCalcLength                                  = $80BE = 32958          compile.asm:123
__COMCCopyString                                  = $80D2 = 32978          compile.asm:135
__COMCDoCompile                                   = $8073 = 32883          compile.asm:51 (unused)
__COMCDoExecute                                   = $8078 = 32888          compile.asm:54
__COMCExit                                        = $807B = 32891          compile.asm:56
__COMCFail1                                       = $8097 = 32919          compile.asm:84
__COMCMacro                                       = $809F = 32927          compile.asm:93
__COMCNotUnderscore                               = $80DD = 32989          compile.asm:143
__COMCStringConstant                              = $80BB = 32955          compile.asm:120
__COMCStringDone                                  = $80E2 = 32994          compile.asm:146
__COMCTryConstant                                 = $80AA = 32938          compile.asm:106
__COMCWord                                        = $8099 = 32921          compile.asm:87
__COMCompiler                                     = $8083 = 32899          compile.asm:71
__COMExExecute                                    = $8110 = 33040          compile.asm:184
__COMExHandleConstant                             = $8103 = 33027          compile.asm:177
__COMExecNotDictionary                            = $80FE = 33022          compile.asm:173
__COMExecuteExit                                  = $8139 = 33081          compile.asm:220
__COMExecutor                                     = $80EC = 33004          compile.asm:160
__COMFalse                                        = $802F = 32815          compare.asm:29
__COMTrue                                         = $802B = 32811          compare.asm:26
__CONConComplete                                  = $8180 = 33152          constant.asm:60
__CONConFail                                      = $8177 = 33143          constant.asm:53
__CONConNotNegative                               = $818B = 33163          constant.asm:73
__CONConvLoop                                     = $8158 = 33112          constant.asm:28
__Core__Mult_Loop                                 = $865E = 34398          multiply.asm:26
__Core__Mult_Shift                                = $8663 = 34403          multiply.asm:30
__DICTAddCopy                                     = $8222 = 33314          dictionary.asm:52
__DICTFindCheckMatch                              = $8268 = 33384          dictionary.asm:109
__DICTFindExit                                    = $8299 = 33433          dictionary.asm:140
__DICTFindFail                                    = $8292 = 33426          dictionary.asm:136
__DICTFindMainLoop                                = $8253 = 33363          dictionary.asm:93
__DICTFindNext                                    = $8289 = 33417          dictionary.asm:130
__DICTFindNoMatch                                 = $8286 = 33414          dictionary.asm:127
__DisplayHexInteger                               = $81C5 = 33221          debug.asm:54
__Greater                                         = $8059 = 32857          compare.asm:85
__ICBranchError                                   = $861B = 34331          miscellany.asm:78
__ICBranchText                                    = $8621 = 34337          miscellany.asm:81
__IOASCIIExit                                     = $8470 = 33904          ioroutines.asm:225
__IOASCIIZ                                        = $8466 = 33894          ioroutines.asm:218
__IOPrintExit                                     = $840A = 33802          ioroutines.asm:110
__L2Loop                                          = $8838 = 34872          screen_layer2.asm:123
__L2Not1                                          = $87EF = 34799          screen_layer2.asm:67
__L2Not2                                          = $87F5 = 34805          screen_layer2.asm:71
__L2Not3                                          = $87FB = 34811          screen_layer2.asm:75
__L2NotCursor                                     = $8805 = 34821          screen_layer2.asm:83
__L2NotSet                                        = $883D = 34877          screen_layer2.asm:128
__L2Outer                                         = $8830 = 34864          screen_layer2.asm:118
__LOADBootLoop                                    = $8569 = 34153          loader.asm:44
__LOADBootMessage                                 = $85AB = 34219          loader.asm:87
__LOADBootNext                                    = $859C = 34204          loader.asm:75
__LOADBootParse                                   = $8586 = 34182          loader.asm:60
__LOADBootParseDone                               = $859B = 34203          loader.asm:73
__LOADBootstrapPage                               = $8555 = 34133          loader.asm:33
__LOADErrorHandler                                = $85BA = 34234          loader.asm:90
__LOADErrorMessage                                = $85E1 = 34273          loader.asm:115
__LOADErrorMessageEnd                             = $85FE = 34302          loader.asm:117
__LOADToEnd                                       = $85C5 = 34245          loader.asm:96
__LessEqual                                       = $8048 = 32840          compare.asm:65
__LowLoop                                         = $88CD = 35021          screen_lores.asm:121
__LowNotCursor                                    = $888D = 34957          screen_lores.asm:72
__LowNotLower                                     = $88A9 = 34985          screen_lores.asm:93
__LowNotLower2                                    = $88C3 = 35011          screen_lores.asm:114
__LowNotSet                                       = $88D2 = 35026          screen_lores.asm:126
__LowOuter                                        = $88C5 = 35013          screen_lores.asm:116
__PARSEGCMsg                                      = $8710 = 34576          parser.asm:89
__PGFail                                          = $86FC = 34556          parser.asm:68
__PGLoadBuffer                                    = $86E3 = 34531          parser.asm:46
__PGReadWord                                      = $86F0 = 34544          parser.asm:58
__PGSkipSpaces                                    = $86D6 = 34518          parser.asm:37
__PNIsDigit                                       = $845F = 33887          ioroutines.asm:205
__PrintNibble                                     = $8457 = 33879          ioroutines.asm:200
__SetMode                                         = $83B9 = 33721          ioroutines.asm:21
__ZXWCCopy                                        = $87A8 = 34728          screen48k.asm:136
__ZXWNoCursor                                     = $877C = 34684          screen48k.asm:97
___kr4                                            = $84AC = 33964          keyboard.asm:56
__copy2                                           = $83AD = 33709          fillcopy.asm:73
__copyExit                                        = $83A9 = 33705          fillcopy.asm:67
__cs1                                             = $8742 = 34626          screen48k.asm:41
__cs2                                             = $874A = 34634          screen48k.asm:46
__fill1                                           = $838D = 33677          fillcopy.asm:28
__kr1                                             = $8490 = 33936          keyboard.asm:39
__kr2                                             = $849B = 33947          keyboard.asm:45
__kr3                                             = $849D = 33949          keyboard.asm:48
__kr_exit                                         = $84CC = 33996          keyboard.asm:86
__kr_keypressed                                   = $84C6 = 33990          keyboard.asm:80
__kr_no_shift_table                               = $84D0 = 34000          keyboard.asm:101
__kr_shift_table                                  = $8520 = 34080          keyboard.asm:113
__kr_symbol_shift_table                           = $84F8 = 34040          keyboard.asm:107
__wcexit                                          = $87AE = 34734          screen48k.asm:143
__zfdefine_2a                                     = $8657 = 34391          multiply.asm:11 (unused)
__zfdefine_2c                                     = $835C = 33628          farmemory.asm:43 (unused)
__zfdefine_2e_68_65_78                            = $843A = 33850          ioroutines.asm:173 (unused)
__zfdefine_2f                                     = $8306 = 33542          divide.asm:11 (unused)
__zfdefine_2f_6d_6f_64                            = $8313 = 33555          divide.asm:26 (unused)
__zfdefine_3c_3d                                  = $803D = 32829          compare.asm:56 (unused)
__zfdefine_3c_3e                                  = $8033 = 32819          compare.asm:39 (unused)
__zfdefine_3d                                     = $8023 = 32803          compare.asm:17 (unused)
__zfdefine_3e                                     = $804E = 32846          compare.asm:76 (unused)
__zfdefine_62_6f_6f_74_73_74_72_61_70_2e_70_61_67_65 = $8554 = 34132          loader.asm:29 (unused)
__zfdefine_63_2c                                  = $8343 = 33603          farmemory.asm:17 (unused)
__zfdefine_63_6f_6d_70_69_6c_65_2f_6d_61_63_72_6f = $8064 = 32868          compile.asm:30 (unused)
__zfdefine_63_6f_70_79                            = $8397 = 33687          fillcopy.asm:46 (unused)
__zfdefine_64_65_62_75_67                         = $8191 = 33169          debug.asm:11 (unused)
__zfdefine_64_69_63_74_2e_61_64_64                = $81E5 = 33253          dictionary.asm:24 (unused)
__zfdefine_64_69_63_74_2e_63_72_75_6e_63_68       = $82BE = 33470          dictionary.asm:194 (unused)
__zfdefine_64_69_63_74_2e_66_69_6e_64             = $8240 = 33344          dictionary.asm:80 (unused)
__zfdefine_64_69_63_74_2e_78_6f_72_2e_74_79_70_65 = $82A8 = 33448          dictionary.asm:168 (unused)
__zfdefine_65_64_69_74_2e_62_75_66_66_65_72       = $8601 = 34305          miscellany.asm:27 (unused)
__zfdefine_65_64_69_74_2e_62_75_66_66_65_72_2e_73_69_7a_65 = $8606 = 34310          miscellany.asm:34 (unused)
__zfdefine_65_78_65_63_75_74_65_2f_6d_61_63_72_6f = $805F = 32863          compile.asm:17 (unused)
__zfdefine_66_69_6c_6c                            = $8388 = 33672          fillcopy.asm:17 (unused)
__zfdefine_68_61_6c_74                            = $85FE = 34302          miscellany.asm:17 (unused)
__zfdefine_69_2c                                  = $8377 = 33655          farmemory.asm:71 (unused)
__zfdefine_69_6e_63_6f_6d_70_6c_65_74_65_2e_62_72_61_6e_63_68 = $8616 = 34326          miscellany.asm:72 (unused)
__zfdefine_69_6e_6b_65_79                         = $8473 = 33907          keyboard.asm:17 (unused)
__zfdefine_69_6f_2e_6d_6f_64_65_2e_34_38_6b       = $83B6 = 33718          ioroutines.asm:17 (unused)
__zfdefine_69_6f_2e_6d_6f_64_65_2e_6c_61_79_65_72_32 = $83BF = 33727          ioroutines.asm:25 (unused)
__zfdefine_69_6f_2e_6d_6f_64_65_2e_6c_6f_77_72_65_73 = $83C4 = 33732          ioroutines.asm:31 (unused)
__zfdefine_69_6f_2e_72_61_77_2e_63_6c_65_61_72    = $83C9 = 33737          ioroutines.asm:43 (unused)
__zfdefine_69_6f_2e_72_61_77_2e_63_6f_6c_6f_75_72 = $83CB = 33739          ioroutines.asm:48 (unused)
__zfdefine_69_6f_2e_72_61_77_2e_6d_6f_76_65       = $83D7 = 33751          ioroutines.asm:63 (unused)
__zfdefine_69_6f_2e_72_61_77_2e_70_72_69_6e_74    = $83CE = 33742          ioroutines.asm:54 (unused)
__zfdefine_6d_6f_64                               = $830D = 33549          divide.asm:19 (unused)
__zfdefine_70_61_67_69_6e_67_2e_72_65_73_65_74    = $8671 = 34417          paging.asm:17 (unused)
__zfdefine_70_61_72_73_65_72_2e_67_65_74          = $86D1 = 34513          parser.asm:30 (unused)
__zfdefine_70_61_72_73_65_72_2e_67_65_74_2e_63_68_65_63_6b = $8706 = 34566          parser.asm:82 (unused)
__zfdefine_70_61_72_73_65_72_2e_67_65_74_2e_63_68_65_63_6b_2e_61_64_64 = $8725 = 34597          parser.asm:98 (unused)
__zfdefine_70_61_72_73_65_72_2e_73_65_74_75_70    = $86CD = 34509          parser.asm:17 (unused)
__zfdefine_73_61_76_65                            = $8654 = 34388          miscellany.asm:90 (unused)
__zfdefine_73_74_61_63_6b_2e_72_65_73_65_74       = $8610 = 34320          miscellany.asm:59 (unused)
__zfdefine_73_79_73_2e_69_6e_66_6f                = $860B = 34315          miscellany.asm:47 (unused)
_end                                              = $0000 = 65536          kernel.asm:11 (unused)
_size                                             = $8000 = 32768          kernel.asm:11 (unused)


total time: 0.0074 sec.
no errors
