
// ***********************************************************************************************
//
//									Unary Arithmetic/Logic 
//
// ***********************************************************************************************

:0= execute 													// true if A = 0
	{ld_a,h} i, {or_l} i, 
	{ld_hl,aaaa} i, 0 , {ret_nz} i,
	{dec_hl} i,
compile ;

:0< execute 													// true if A < 0
	{bit_7,h} i,  
	{ld_hl,aaaa} i, 0 , {ret_z} i,
	{dec_hl} i,
compile ;

:abs execute  												// Absolute value
	{bit_7,h} i, {ret_z} i,  							// falls through into 0-
compile 														// hence must be before it :)

:negate execute 												// 2's complement
	{ld_a,h} i, {cpl} i, {ld_h,a} i,
	{ld_a,l} i, {cpl} i, {ld_l,a} i,
	{inc_hl} i, 
compile ;

:- execute 													// 1's complement
	{ld_a,h} i, {cpl} i, {ld_h,a} i,
	{ld_a,l} i, {cpl} i, {ld_l,a} i,
compile ;




:1+ {inc_hl} i, ; 
:2+ {inc_hl} i, {inc_hl} i, ; 
:1- {dec_hl} i, ; 
:2- {dec_hl} i, {dec_hl} i, ; 

:2* {add_hl,hl} i, ; 
:4* {add_hl,hl} i, {add_hl,hl} i, ; 
:8* {add_hl,hl} i, {add_hl,hl} i, {add_hl,hl} i, ; 
:16* {add_hl,hl} i, {add_hl,hl} i, {add_hl,hl} i, {add_hl,hl} i, ; 

:256* {ld_h,l} i, {ld_l,dd} i, 0 c, ; 

:2/ {sra_h} i, {rr_l} i, ; 

:bswap {ld_a,l} i, {ld_l,h} i, {ld_h,a} i, ; 


:4/ 2/ 2/ ; 											// these use that macro but are words
:16/ 2/ 2/ 2/ 2/ ;

:256/ 
	{ld_l,h} i, {ld_h,dd} i, 0 c,
	{bit_7,l} i, {ret_z} i, {dec_h} i,
;

// ***********************************************************************************************
//
//								Memory/Port Access 
//
// ***********************************************************************************************


:c@ 	{ld_l,(hl)} i, {ld_h,dd} i, 0 c, ; 
:@ 		{ld_a,(hl)} i, {inc_hl} i, {ld_h,(hl)} i, {ld_l,a} i, ; 

:c! 	{ld_(hl),e} i, ; 
:!     	{ld_(hl),e} i, {inc_hl} i, {ld_(hl),d} i, {dec_hl} i,  ; 

:p@ 	{ld_c,l} i, {ld_b,h} i, {in_l,(c)} i, {ld_h,dd} i, 0 c, ; 
:p! 	{ld_c,l} i, {ld_b,h} i, {out_(c),e} i, ; 


:+! 	execute
			{ld_a,e} i, {add_a,(hl)} i, {ld_(hl),a} i, {inc_hl} i,
			{ld_a,d} i, {adc_a,(hl)} i, {ld_(hl),a} i, {dec_hl} i,
		compile ;

:or! 	execute
			{ld_a,e} i, {or_(hl)} i, {ld_(hl),a} i, {inc_hl} i,
			{ld_a,d} i, {or_(hl)} i, {ld_(hl),a} i, {dec_hl} i,
		compile ;

// ***********************************************************************************************
//
//								 Register routines
//
// ***********************************************************************************************

 

:swap 	{ex_de,hl} i, ; 
:a>b 	{ld_e,l} i, {ld_d,h} i, ; 
:b>a 	{ld_l,e} i, {ld_h,d} i, ; 

// None of the register stack/destack instructions has an executable equivalent.
// as it would crash the system :)  ; does not have an executable equivalent for the same reason.

:ab>r 	{push_de} i, {push_hl} i, ; 
:r>ab 	{pop_hl} i, {pop_de} i, ; 

:a>r 	{push_hl} i, ; 
:r>a 	{pop_hl} i, ; 

:b>r 	{push_de} i, ; 
:r>b 	{pop_de} i, ; 

// ***********************************************************************************************
//
//									Comparison routines
//
// ***********************************************************************************************



:less   							// For CF compatibility
:< 		1- <= ;					// Simple synthesis which will not work if A = -32768
:>= 	1- > ;

// ***********************************************************************************************
//
//			Words which are macros (e.g. code generators) have associated executables
// 			where appropriate (i.e. they don't manipulate the return stack)
//
// ***********************************************************************************************



:+ + ; 	:1+ 1+ ; 		:2+ 2+ ; 		:1- 1- ;		:2- 2- ;		:2* 2* ; 	:4* 4* ;
:8* 8* ;	:16* 16* ;		:256* 256* ;	:2/ 2/ ; 		:bswap bswap ;	:c@ c@ ;	:@ @ ;
:c! c! ; 	:! ! ; 		:p@ p@ ;		:p! p! ;		:swap swap ;	:a>b a>b ;	:b>a b>a ;


// ***********************************************************************************************
//
//									Variable functionality
//
// ***********************************************************************************************



:h a>r sys.info r>b ;								// read dictionary address next free doing A->B 
:here h @ ;										// read current next free value

:here.adjust here + h ! ; private					// Adjust here by the given amount.



:variable 
	0 , 			 								// compile a 0 for storage
	160 dict.xor.type								// make private and variable.
; 

:@@  	 											// adjust variable to load value not address
	-3 here.adjust 									// converts ex de,hl : ld hl,xxxx 
	{ld_hl,(aaaa)} i,  								// to       ex de,hl : ld hl,(xxxx)
	2 here.adjust 
; 

:!! 	 											// adjust variable to save value not address
	-4 here.adjust 									// converts ex de,hl : ld hl,xxxx
	{nop} i, 										// to       nop : ld (xxxx),hl
	{ld_(aaaa),hl} i, 
	2 here.adjust 
; 

// ***********************************************************************************************
//
//										[-]If ... Then
//
// ***********************************************************************************************



:if.branch.address variable 						// Address of jump target.



:if 
	{ld_a,h} i, {or_l} i,							// check if HL = 0
	{jp_z,aaaa} i, 									// skip if zero
	here if.branch.address !! 						// remember where branch address goes
	incomplete.branch , 							// temporary branch address is warm start
; 

:-if 
	{bit_7,h} i,									// check if HL < 0
	{jp_z,aaaa} i, 									// skip if zero
	here if.branch.address !! 						// remember where branch address goes
	incomplete.branch , 							// temporary branch address is warm start
; 

 										// exists an executable as called on ;
:then.executable private
	here a>r a>r									// Push here on twice
	if.branch.address @@ h ! 						// Set to compile at branch address
	r>a , 											// compile branch address
	r>a h ! 										// Put back at original position.
	0 if.branch.address !! 							// zero branch address indicating closed
; 


:then then.executable ; 							// macro version just calls the routine.

// ***********************************************************************************************
//
//							This version of ; also closes any open ifs.
//
// ***********************************************************************************************


:;  
	{ret} c, 										// compile the ret.
	if.branch.address @@ if then.executable then 	// if if open close it.
;

// ***********************************************************************************************
//
//										Begin .. [-]Until/Again
//
// ***********************************************************************************************


:begin.branch.address variable						// Branch back here.



:begin
	here begin.branch.address !! 					// Save loop address
; 

:until 
	{ld_a,h} i, {or_l} i,							// check if HL = 0
	{jp_z,aaaa} i, 									// loop back if +ve
	begin.branch.address @@ ,
; 

:-until 
	{bit_7,h} i,									// check if HL < 0
	{jp_z,aaaa} i, 									// loop back if +ve
	begin.branch.address @@ ,
; 

:again
	{jp_aaaa} i, 									// loop back always
	begin.branch.address @@ ,
;

// ***********************************************************************************************
//
//											Max and Min
//
// ***********************************************************************************************


:max ab>r < if r>ab ; then r>ab b>a ;
:min ab>r > if r>ab ; then r>ab b>a ;

// ***********************************************************************************************
//
//										For / [-]Next loop
//
// ***********************************************************************************************


:for.loop.address variable


:for
	{ld_b,h} i, {ld_c,l} i, 						// put loop value in BC
	here for.loop.address !!						// save loop address
	{push_bc} i, 									// push on stack
; 

:next
	{pop_bc} i,										// pop index off stack
	{dec_bc} i, 									// decrement count
	{ld_a,b} i, {or_c} i,							// check if BC != 0
	{jp_nz,aaaa} i, 								// loop back if non zero
	for.loop.address @@ , 							// to the loop address	
; 

:-next
	{pop_bc} i,										// pop index off stack
	{dec_bc} i, 									// decrement count
	{bit_7,b} i,									// check positive
	{jp_z,aaaa} i, 									// loop back if positive
	for.loop.address @@ , 							// to the loop address	
; 

:i 	
	{pop_hl} i,										// pop index off stack
	{push_hl} i,									// push it back.
; 


execute dict.crunch compile									// remove all privates.

// ***********************************************************************************************
//									Core updates
//
//	29-10-18		Core v1. Completed.
//
// ***********************************************************************************************

